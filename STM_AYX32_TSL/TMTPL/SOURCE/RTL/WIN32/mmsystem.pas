(****************************************************************)
(*                                                              *)
(*       TMT Pascal 4 Runtime Library                           *)
(*       Win32 Multimedia Interface Unit                        *)
(*       Based on mmsystem.h                                    *)
(*       Targets: WIN32 only                                    *)
(*                                                              *)
(*       Copyright (c) 1995,98 TMT Development Corporation      *)
(*       Portions Copyright (c) by Microsoft Corporation        *)
(*       Author: Vadim Bodrov                                   *)
(*                                                              *)
(****************************************************************)

{$i-,r-,a+,oa+,p+,t-,x+,b-,cc+,q-,v+,s-}

unit MMSystem;

interface

uses Windows;

const

 winmmdll                = 'winmm.dll';

(****************************************************************************
                    General constants and data types
****************************************************************************)

 SC_SCREENSAVE           = $0000F140;
 NEWTRANSPARENT          = $00000003;
 QUERYROPSUPPORT         = $00000028;
 SELECTDIB               = $00000028;

 MM_MICROSOFT            = 1;
 MAXPNAMELEN             = 32;
 MAXERRORLENGTH          = 128;
 MAX_JOYSTICKOEMVXDNAME  = 260;

 MM_MIDI_MAPPER          = $0001;
 MM_WAVE_MAPPER          = $0002;
 MM_SNDBLST_MIDIOUT      = $0003;
 MM_SNDBLST_MIDIIN       = $0004;
 MM_SNDBLST_SYNTH        = $0005;
 MM_SNDBLST_WAVEOUT      = $0006;
 MM_SNDBLST_WAVEIN       = $0007;
 MM_ADLIB                = $0009;
 MM_MPU401_MIDIOUT       = $000A;
 MM_MPU401_MIDIIN        = $000B;
 MM_PC_JOYSTICK          = $000C;
 TIME_MS                 = $0001;
 TIME_SAMPLES            = $0002;
 TIME_BYTES              = $0004;
 TIME_SMPTE              = $0008;
 TIME_MIDI               = $0010;
 TIME_TICKS              = $0020;

 MM_JOY1MOVE             = $03A0;
 MM_JOY2MOVE             = $03A1;
 MM_JOY1ZMOVE            = $03A2;
 MM_JOY2ZMOVE            = $03A3;
 MM_JOY1BUTTONDOWN       = $03B5;
 MM_JOY2BUTTONDOWN       = $03B6;
 MM_JOY1BUTTONUP         = $03B7;
 MM_JOY2BUTTONUP         = $03B8;
 MM_MCINOTIFY            = $03B9;
 MM_WOM_OPEN             = $03BB;
 MM_WOM_CLOSE            = $03BC;
 MM_WOM_DONE             = $03BD;
 MM_WIM_OPEN             = $03BE;
 MM_WIM_CLOSE            = $03BF;
 MM_WIM_DATA             = $03C0;
 MM_MIM_OPEN             = $03C1;
 MM_MIM_CLOSE            = $03C2;
 MM_MIM_DATA             = $03C3;
 MM_MIM_LONGDATA         = $03C4;
 MM_MIM_ERROR            = $03C5;
 MM_MIM_LONGERROR        = $03C6;
 MM_MOM_OPEN             = $03C7;
 MM_MOM_CLOSE            = $03C8;
 MM_MOM_DONE             = $03C9;
 MM_DRVM_OPEN            = $03D0;
 MM_DRVM_CLOSE           = $03D1;
 MM_DRVM_DATA            = $03D2;
 MM_DRVM_ERROR           = $03D3;
 MM_STREAM_OPEN          = $03D4;
 MM_STREAM_CLOSE         = $03D5;
 MM_STREAM_DONE          = $03D6;
 MM_STREAM_ERROR         = $03D7;
 MM_MOM_POSITIONCB       = $03CA;
 MM_MCISIGNAL            = $03CB;
 MM_MIM_MOREDATA         = $03CC;
 MM_MIXM_LINE_CHANGE     = $03D0;
 MM_MIXM_CONTROL_CHANGE  = $03D1;

 DRVCNF_CANCEL           = $0000;
 DRVCNF_OK               = $0001;
 DRVCNF_RESTART          = $0002;

 DRV_LOAD                = $0001;
 DRV_ENABLE              = $0002;
 DRV_OPEN                = $0003;
 DRV_CLOSE               = $0004;
 DRV_DISABLE             = $0005;
 DRV_FREE                = $0006;
 DRV_CONFIGURE           = $0007;
 DRV_QUERYCONFIGURE      = $0008;
 DRV_INSTALL             = $0009;
 DRV_REMOVE              = $000A;
 DRV_EXITSESSION         = $000B;
 DRV_POWER               = $000F;
 DRV_RESERVED            = $0800;
 DRV_USER                = $4000;
 DRV_CANCEL              = DRVCNF_CANCEL;
 DRV_OK                  = DRVCNF_OK;
 DRV_RESTART             = DRVCNF_RESTART;
 DRV_MCI_FIRST           = DRV_RESERVED;
 DRV_MCI_LAST            = DRV_RESERVED + $FFF;

 MMSYSERR_BASE           = 0;
 WAVERR_BASE             = 32;
 MIDIERR_BASE            = 64;
 TIMERR_BASE             = 96;
 JOYERR_BASE             = 160;
 MCIERR_BASE             = 256;
 MIXERR_BASE             = 1024;

 MCI_STRING_OFFSET       = 512;
 MCI_VD_OFFSET           = 1024;
 MCI_CD_OFFSET           = 1088;
 MCI_WAVE_OFFSET         = 1152;
 MCI_SEQ_OFFSET          = 1216;

 MMSYSERR_NOERROR        = 0;
 MMSYSERR_ERROR          = MMSYSERR_BASE + 01;
 MMSYSERR_BADDEVICEID    = MMSYSERR_BASE + 02;
 MMSYSERR_NOTENABLED     = MMSYSERR_BASE + 03;
 MMSYSERR_ALLOCATED      = MMSYSERR_BASE + 04;
 MMSYSERR_INVALHANDLE    = MMSYSERR_BASE + 05;
 MMSYSERR_NODRIVER       = MMSYSERR_BASE + 06;
 MMSYSERR_NOMEM          = MMSYSERR_BASE + 07;
 MMSYSERR_NOTSUPPORTED   = MMSYSERR_BASE + 08;
 MMSYSERR_BADERRNUM      = MMSYSERR_BASE + 09;
 MMSYSERR_INVALFLAG      = MMSYSERR_BASE + 10;
 MMSYSERR_INVALPARAM     = MMSYSERR_BASE + 11;
 MMSYSERR_HANDLEBUSY     = MMSYSERR_BASE + 12;
 MMSYSERR_INVALIDALIAS   = MMSYSERR_BASE + 13;
 MMSYSERR_BADDB          = MMSYSERR_BASE + 14;
 MMSYSERR_KEYNOTFOUND    = MMSYSERR_BASE + 15;
 MMSYSERR_READERROR      = MMSYSERR_BASE + 16;
 MMSYSERR_WRITEERROR     = MMSYSERR_BASE + 17;
 MMSYSERR_DELETEERROR    = MMSYSERR_BASE + 18;
 MMSYSERR_VALNOTFOUND    = MMSYSERR_BASE + 19;
 MMSYSERR_NODRIVERCB     = MMSYSERR_BASE + 20;
 MMSYSERR_LASTERROR      = MMSYSERR_BASE + 20;

 CALLBACK_TYPEMASK       = $00070000;
 CALLBACK_NULL           = $00000000;
 CALLBACK_WINDOW         = $00010000;
 CALLBACK_TASK           = $00020000;
 CALLBACK_FUNCTION       = $00030000;
 CALLBACK_THREAD         = CALLBACK_TASK;
 CALLBACK_EVENT          = $00050000;

 SND_SYNC                = $0000;
 SND_ASYNC               = $0001;
 SND_NODEFAULT           = $0002;
 SND_MEMORY              = $0004;
 SND_LOOP                = $0008;
 SND_NOSTOP              = $0010;

 SND_NOWAIT              = $00002000;
 SND_ALIAS               = $00010000;
 SND_ALIAS_ID            = $00110000;
 SND_FILENAME            = $00020000;
 SND_RESOURCE            = $00040004;
 SND_PURGE               = $0040;
 SND_APPLICATION         = $0080;

 SND_ALIAS_START         = 0;

 SND_ALIAS_SYSTEMASTERISK    = SND_ALIAS_START + (Longint(Ord('S')) or
                              (Longint(Ord('*')) shl 8));
 SND_ALIAS_SYSTEMQUESTION    = SND_ALIAS_START + (Longint(Ord('S')) or
                              (Longint(Ord('?')) shl 8));
 SND_ALIAS_SYSTEMHAND        = SND_ALIAS_START + (Longint(Ord('S')) or
                              (Longint(Ord('H')) shl 8));
 SND_ALIAS_SYSTEMEXIT        = SND_ALIAS_START + (Longint(Ord('S')) or
                              (Longint(Ord('E')) shl 8));
 SND_ALIAS_SYSTEMSTART       = SND_ALIAS_START + (Longint(Ord('S')) or
                              (Longint(Ord('S')) shl 8));
 SND_ALIAS_SYSTEMWELCOME     = SND_ALIAS_START + (Longint(Ord('S')) or
                              (Longint(Ord('W')) shl 8));
 SND_ALIAS_SYSTEMEXCLAMATION = SND_ALIAS_START + (Longint(Ord('S')) or
                              (Longint(Ord('!')) shl 8));
 SND_ALIAS_SYSTEMDEFAULT     = SND_ALIAS_START + (Longint(Ord('S')) or
                              (Longint(Ord('D')) shl 8));

 WAVERR_BADFORMAT        = WAVERR_BASE + 0;
 WAVERR_STILLPLAYING     = WAVERR_BASE + 1;
 WAVERR_UNPREPARED       = WAVERR_BASE + 2;
 WAVERR_SYNC             = WAVERR_BASE + 3;
 WAVERR_LASTERROR        = WAVERR_BASE + 3;

 WOM_OPEN                = MM_WOM_OPEN;
 WOM_CLOSE               = MM_WOM_CLOSE;
 WOM_DONE                = MM_WOM_DONE;
 WIM_OPEN                = MM_WIM_OPEN;
 WIM_CLOSE               = MM_WIM_CLOSE;
 WIM_DATA                = MM_WIM_DATA;

 WAVE_MAPPER             = $FFFFFFFF;
 WAVE_FORMAT_QUERY       = $0001;
 WAVE_ALLOWSYNC          = $0002;
 WAVE_MAPPED             = $0004;
 WAVECAPS_PITCH          = $0001;
 WAVECAPS_PLAYBACKRATE   = $0002;
 WAVECAPS_VOLUME         = $0004;
 WAVECAPS_LRVOLUME       = $0008;
 WAVECAPS_SYNC           = $0010;
 WAVECAPS_SAMPLEACCURATE = $0020;
 WAVECAPS_DIRECTSOUND    = $0040;

 WAVE_FORMAT_PCM         = $00000001;
 WAVE_INVALIDFORMAT      = $00000000;
 WAVE_FORMAT_1M08        = $00000001;
 WAVE_FORMAT_1S08        = $00000002;
 WAVE_FORMAT_1M16        = $00000004;
 WAVE_FORMAT_1S16        = $00000008;
 WAVE_FORMAT_2M08        = $00000010;
 WAVE_FORMAT_2S08        = $00000020;
 WAVE_FORMAT_2M16        = $00000040;
 WAVE_FORMAT_2S16        = $00000080;
 WAVE_FORMAT_4M08        = $00000100;
 WAVE_FORMAT_4S08        = $00000200;
 WAVE_FORMAT_4M16        = $00000400;
 WAVE_FORMAT_4S16        = $00000800;

 WHDR_DONE               = $00000001;
 WHDR_PREPARED           = $00000002;
 WHDR_BEGINLOOP          = $00000004;
 WHDR_ENDLOOP            = $00000008;
 WHDR_INQUEUE            = $00000010;

 MIDIERR_UNPREPARED      = MIDIERR_BASE + 0;
 MIDIERR_STILLPLAYING    = MIDIERR_BASE + 1;
 MIDIERR_NOMAP           = MIDIERR_BASE + 2;
 MIDIERR_NOTREADY        = MIDIERR_BASE + 3;
 MIDIERR_NODEVICE        = MIDIERR_BASE + 4;
 MIDIERR_INVALIDSETUP    = MIDIERR_BASE + 5;
 MIDIERR_BADOPENMODE     = MIDIERR_BASE + 6;
 MIDIERR_DONT_CONTINUE   = MIDIERR_BASE + 7;
 MIDIERR_LASTERROR       = MIDIERR_BASE + 5;

 MIDIPATCHSIZE           = 128;

 MIM_OPEN                = MM_MIM_OPEN;
 MIM_CLOSE               = MM_MIM_CLOSE;
 MIM_DATA                = MM_MIM_DATA;
 MIM_LONGDATA            = MM_MIM_LONGDATA;
 MIM_ERROR               = MM_MIM_ERROR;
 MIM_LONGERROR           = MM_MIM_LONGERROR;
 MOM_OPEN                = MM_MOM_OPEN;
 MOM_CLOSE               = MM_MOM_CLOSE;
 MOM_DONE                = MM_MOM_DONE;

 MIM_MOREDATA            = MM_MIM_MOREDATA;
 MOM_POSITIONCB          = MM_MOM_POSITIONCB;

 MIDIMAPPER              = $FFFFFFFF;
 MIDI_MAPPER             = $FFFFFFFF;


 MIDI_IO_STATUS          = $00000020;


 MIDI_CACHE_ALL          = $01;
 MIDI_CACHE_BESTFIT      = $02;
 MIDI_CACHE_QUERY        = $03;
 MIDI_UNCACHE            = $04;

 MOD_MIDIPORT            = $01;
 MOD_SYNTH               = $02;
 MOD_SQSYNTH             = $03;
 MOD_FMSYNTH             = $04;
 MOD_MAPPER              = $05;


 MIDICAPS_VOLUME         = $0001;
 MIDICAPS_LRVOLUME       = $0002;
 MIDICAPS_CACHE          = $0004;
 MIDICAPS_STREAM         = $0008;

 MHDR_DONE               = $00000001;
 MHDR_PREPARED           = $00000002;
 MHDR_INQUEUE            = $00000004;
 MHDR_ISSTRM             = $00000008;

 AUX_MAPPER              = $FFFFFFFF;

 AUXCAPS_CDAUDIO         = $0001;
 AUXCAPS_AUXIN           = $0002;

 JOYERR_NOERROR          = $0000;
 JOYERR_PARMS            = JOYERR_BASE + $0005;
 JOYERR_NOCANDO          = JOYERR_BASE + $0006;
 JOYERR_UNPLUGGED        = JOYERR_BASE + $0007;

 JOY_BUTTON1             = $0001;
 JOY_BUTTON2             = $0002;
 JOY_BUTTON3             = $0004;
 JOY_BUTTON4             = $0008;
 JOY_BUTTON1CHG          = $0100;
 JOY_BUTTON2CHG          = $0200;
 JOY_BUTTON3CHG          = $0400;
 JOY_BUTTON4CHG          = $0800;

 JOY_BUTTON5             = $00000010;
 JOY_BUTTON6             = $00000020;
 JOY_BUTTON7             = $00000040;
 JOY_BUTTON8             = $00000080;
 JOY_BUTTON9             = $00000100;
 JOY_BUTTON10            = $00000200;
 JOY_BUTTON11            = $00000400;
 JOY_BUTTON12            = $00000800;
 JOY_BUTTON13            = $00001000;
 JOY_BUTTON14            = $00002000;
 JOY_BUTTON15            = $00004000;
 JOY_BUTTON16            = $00008000;
 JOY_BUTTON17            = $00010000;
 JOY_BUTTON18            = $00020000;
 JOY_BUTTON19            = $00040000;
 JOY_BUTTON20            = $00080000;
 JOY_BUTTON21            = $00100000;
 JOY_BUTTON22            = $00200000;
 JOY_BUTTON23            = $00400000;
 JOY_BUTTON24            = $00800000;
 JOY_BUTTON25            = $01000000;
 JOY_BUTTON26            = $02000000;
 JOY_BUTTON27            = $04000000;
 JOY_BUTTON28            = $08000000;
 JOY_BUTTON29            = $10000000;
 JOY_BUTTON30            = $20000000;
 JOY_BUTTON31            = $40000000;
 JOY_BUTTON32            = $80000000;

 JOY_POVCENTERED         = -1;
 JOY_POVFORWARD          = 0;
 JOY_POVRIGHT            = 9000;
 JOY_POVBACKWARD         = 18000;
 JOY_POVLEFT             = 27000;

 JOY_RETURNX             = $00000001;
 JOY_RETURNY             = $00000002;
 JOY_RETURNZ             = $00000004;
 JOY_RETURNR             = $00000008;
 JOY_RETURNU             = $00000010;
 JOY_RETURNV             = $00000020;
 JOY_RETURNPOV           = $00000040;
 JOY_RETURNBUTTONS       = $00000080;
 JOY_RETURNRAWDATA       = $00000100;
 JOY_RETURNPOVCTS        = $00000200;
 JOY_RETURNCENTERED      = $00000400;
 JOY_USEDEADZONE         = $00000800;
 JOY_RETURNALL           = (JOY_RETURNX or JOY_RETURNY or JOY_RETURNZ or
                           JOY_RETURNU or JOY_RETURNR or JOY_RETURNV or
                           JOY_RETURNPOV or JOY_RETURNBUTTONS);

 JOY_CAL_READALWAYS      = $00010000;
 JOY_CAL_READXYONLY      = $00020000;
 JOY_CAL_READ3           = $00040000;
 JOY_CAL_READ4           = $00080000;
 JOY_CAL_READXONLY       = $00100000;
 JOY_CAL_READYONLY       = $00200000;
 JOY_CAL_READ5           = $00400000;
 JOY_CAL_READ6           = $00800000;
 JOY_CAL_READZONLY       = $01000000;
 JOY_CAL_READRONLY       = $02000000;
 JOY_CAL_READUONLY       = $04000000;
 JOY_CAL_READVONLY       = $08000000;

 JOYSTICKID1             = $0000;
 JOYSTICKID2             = $0001;

 JOYCAPS_HASZ            = $0000;
 JOYCAPS_HASR            = $0002;
 JOYCAPS_HASU            = $0004;
 JOYCAPS_HASV            = $0008;
 JOYCAPS_HASPOV          = $0010;
 JOYCAPS_POV4DIR         = $0020;
 JOYCAPS_POVCTS          = $0040;

 AUXCAPS_VOLUME          = $0001;
 AUXCAPS_LRVOLUME        = $0002;

 MIXER_SHORT_NAME_CHARS  = 16;
 MIXER_LONG_NAME_CHARS   = 64;

 MIXERR_INVALLINE        = MIXERR_BASE + $00;
 MIXERR_INVALCONTROL     = MIXERR_BASE + $01;
 MIXERR_INVALVALUE       = MIXERR_BASE + $02;
 MIXERR_LASTERROR        = MIXERR_BASE + $02;

 MIXER_OBJECTF_HANDLE    = $80000000;
 MIXER_OBJECTF_MIXER     = $00000000;
 MIXER_OBJECTF_HMIXER    = (MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIXER);
 MIXER_OBJECTF_WAVEOUT   = $10000000;
 MIXER_OBJECTF_HWAVEOUT  = (MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_WAVEOUT);
 MIXER_OBJECTF_WAVEIN    = $20000000;
 MIXER_OBJECTF_HWAVEIN   = (MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_WAVEIN);
 MIXER_OBJECTF_MIDIOUT   = $30000000;
 MIXER_OBJECTF_HMIDIOUT  = (MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIDIOUT);
 MIXER_OBJECTF_MIDIIN    = $40000000;
 MIXER_OBJECTF_HMIDIIN   = (MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIDIIN);
 MIXER_OBJECTF_AUX       = $50000000;

 MIXERLINE_LINEF_ACTIVE        = $00000001;
 MIXERLINE_LINEF_DISCONNECTED  = $00008000;
 MIXERLINE_LINEF_SOURCE        = $80000000;

 MIXERLINE_COMPONENTTYPE_DST_FIRST       = $00000000;
 MIXERLINE_COMPONENTTYPE_DST_UNDEFINED   = MIXERLINE_COMPONENTTYPE_DST_FIRST + 0;
 MIXERLINE_COMPONENTTYPE_DST_DIGITAL     = MIXERLINE_COMPONENTTYPE_DST_FIRST + 1;
 MIXERLINE_COMPONENTTYPE_DST_LINE        = MIXERLINE_COMPONENTTYPE_DST_FIRST + 2;
 MIXERLINE_COMPONENTTYPE_DST_MONITOR     = MIXERLINE_COMPONENTTYPE_DST_FIRST + 3;
 MIXERLINE_COMPONENTTYPE_DST_SPEAKERS    = MIXERLINE_COMPONENTTYPE_DST_FIRST + 4;
 MIXERLINE_COMPONENTTYPE_DST_HEADPHONES  = MIXERLINE_COMPONENTTYPE_DST_FIRST + 5;
 MIXERLINE_COMPONENTTYPE_DST_TELEPHONE   = MIXERLINE_COMPONENTTYPE_DST_FIRST + 6;
 MIXERLINE_COMPONENTTYPE_DST_WAVEIN      = MIXERLINE_COMPONENTTYPE_DST_FIRST + 7;
 MIXERLINE_COMPONENTTYPE_DST_VOICEIN     = MIXERLINE_COMPONENTTYPE_DST_FIRST + 8;
 MIXERLINE_COMPONENTTYPE_DST_LAST        = MIXERLINE_COMPONENTTYPE_DST_FIRST + 8;

 MIXERLINE_COMPONENTTYPE_SRC_FIRST       = $00001000;
 MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED   = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 0;
 MIXERLINE_COMPONENTTYPE_SRC_DIGITAL     = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 1;
 MIXERLINE_COMPONENTTYPE_SRC_LINE        = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 2;
 MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE  = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 3;
 MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 4;
 MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 5;
 MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE   = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 6;
 MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER   = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 7;
 MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT     = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 8;
 MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY   = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 9;
 MIXERLINE_COMPONENTTYPE_SRC_ANALOG      = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10;
 MIXERLINE_COMPONENTTYPE_SRC_LAST        = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10;

 MIXERLINE_TARGETTYPE_UNDEFINED      = 0;
 MIXERLINE_TARGETTYPE_WAVEOUT        = 1;
 MIXERLINE_TARGETTYPE_WAVEIN         = 2;
 MIXERLINE_TARGETTYPE_MIDIOUT        = 3;
 MIXERLINE_TARGETTYPE_MIDIIN         = 4;
 MIXERLINE_TARGETTYPE_AUX            = 5;

 MIXER_GETLINEINFOF_DESTINATION      = $00000000;
 MIXER_GETLINEINFOF_SOURCE           = $00000001;
 MIXER_GETLINEINFOF_LINEID           = $00000002;
 MIXER_GETLINEINFOF_COMPONENTTYPE    = $00000003;
 MIXER_GETLINEINFOF_TARGETTYPE       = $00000004;

 MIXER_GETLINEINFOF_QUERYMASK        = $0000000F;

 MIXERCONTROL_CONTROLF_UNIFORM       = $00000001;
 MIXERCONTROL_CONTROLF_MULTIPLE      = $00000002;
 MIXERCONTROL_CONTROLF_DISABLED      = $80000000;

 MIXERCONTROL_CT_CLASS_MASK          = $F0000000;
 MIXERCONTROL_CT_CLASS_CUSTOM        = $00000000;
 MIXERCONTROL_CT_CLASS_METER         = $10000000;
 MIXERCONTROL_CT_CLASS_SWITCH        = $20000000;
 MIXERCONTROL_CT_CLASS_NUMBER        = $30000000;
 MIXERCONTROL_CT_CLASS_SLIDER        = $40000000;
 MIXERCONTROL_CT_CLASS_FADER         = $50000000;
 MIXERCONTROL_CT_CLASS_TIME          = $60000000;
 MIXERCONTROL_CT_CLASS_LIST          = $70000000;
 MIXERCONTROL_CT_SUBCLASS_MASK       = $0F000000;
 MIXERCONTROL_CT_SC_SWITCH_BOOLEAN   = $00000000;
 MIXERCONTROL_CT_SC_SWITCH_BUTTON    = $01000000;
 MIXERCONTROL_CT_SC_METER_POLLED     = $00000000;
 MIXERCONTROL_CT_SC_TIME_MICROSECS   = $00000000;
 MIXERCONTROL_CT_SC_TIME_MILLISECS   = $01000000;
 MIXERCONTROL_CT_SC_LIST_SINGLE      = $00000000;
 MIXERCONTROL_CT_SC_LIST_MULTIPLE    = $01000000;
 MIXERCONTROL_CT_UNITS_MASK          = $00FF0000;
 MIXERCONTROL_CT_UNITS_CUSTOM        = $00000000;
 MIXERCONTROL_CT_UNITS_BOOLEAN       = $00010000;
 MIXERCONTROL_CT_UNITS_SIGNED        = $00020000;
 MIXERCONTROL_CT_UNITS_UNSIGNED      = $00030000;
 MIXERCONTROL_CT_UNITS_DECIBELS      = $00040000;
 MIXERCONTROL_CT_UNITS_PERCENT       = $00050000;

 MIXERCONTROL_CONTROLTYPE_CUSTOM         = MIXERCONTROL_CT_CLASS_CUSTOM or
                                           MIXERCONTROL_CT_UNITS_CUSTOM;
 MIXERCONTROL_CONTROLTYPE_BOOLEANMETER   = MIXERCONTROL_CT_CLASS_METER or
                                           MIXERCONTROL_CT_SC_METER_POLLED or
                                           MIXERCONTROL_CT_UNITS_BOOLEAN;
 MIXERCONTROL_CONTROLTYPE_SIGNEDMETER    = MIXERCONTROL_CT_CLASS_METER or
                                           MIXERCONTROL_CT_SC_METER_POLLED or
                                           MIXERCONTROL_CT_UNITS_SIGNED;
 MIXERCONTROL_CONTROLTYPE_PEAKMETER      = MIXERCONTROL_CONTROLTYPE_SIGNEDMETER + 1;
 MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER  = MIXERCONTROL_CT_CLASS_METER or
                                           MIXERCONTROL_CT_SC_METER_POLLED or
                                           MIXERCONTROL_CT_UNITS_UNSIGNED;
 MIXERCONTROL_CONTROLTYPE_BOOLEAN        = MIXERCONTROL_CT_CLASS_SWITCH or
                                           MIXERCONTROL_CT_SC_SWITCH_BOOLEAN or
                                           MIXERCONTROL_CT_UNITS_BOOLEAN;
 MIXERCONTROL_CONTROLTYPE_ONOFF          = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 1;
 MIXERCONTROL_CONTROLTYPE_MUTE           = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 2;
 MIXERCONTROL_CONTROLTYPE_MONO           = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 3;
 MIXERCONTROL_CONTROLTYPE_LOUDNESS       = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 4;
 MIXERCONTROL_CONTROLTYPE_STEREOENH      = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 5;
 MIXERCONTROL_CONTROLTYPE_BUTTON         = MIXERCONTROL_CT_CLASS_SWITCH or
                                           MIXERCONTROL_CT_SC_SWITCH_BUTTON or
                                           MIXERCONTROL_CT_UNITS_BOOLEAN;
 MIXERCONTROL_CONTROLTYPE_DECIBELS       = MIXERCONTROL_CT_CLASS_NUMBER or
                                           MIXERCONTROL_CT_UNITS_DECIBELS;
 MIXERCONTROL_CONTROLTYPE_SIGNED         = MIXERCONTROL_CT_CLASS_NUMBER or
                                           MIXERCONTROL_CT_UNITS_SIGNED;
 MIXERCONTROL_CONTROLTYPE_UNSIGNED       = MIXERCONTROL_CT_CLASS_NUMBER or
                                           MIXERCONTROL_CT_UNITS_UNSIGNED;
 MIXERCONTROL_CONTROLTYPE_PERCENT        = MIXERCONTROL_CT_CLASS_NUMBER or
                                           MIXERCONTROL_CT_UNITS_PERCENT;
 MIXERCONTROL_CONTROLTYPE_SLIDER         = MIXERCONTROL_CT_CLASS_SLIDER or
                                           MIXERCONTROL_CT_UNITS_SIGNED;
 MIXERCONTROL_CONTROLTYPE_PAN            = MIXERCONTROL_CONTROLTYPE_SLIDER + 1;
 MIXERCONTROL_CONTROLTYPE_QSOUNDPAN      = MIXERCONTROL_CONTROLTYPE_SLIDER + 2;
 MIXERCONTROL_CONTROLTYPE_FADER          = MIXERCONTROL_CT_CLASS_FADER or
                                           MIXERCONTROL_CT_UNITS_UNSIGNED;
 MIXERCONTROL_CONTROLTYPE_VOLUME         = MIXERCONTROL_CONTROLTYPE_FADER + 1;
 MIXERCONTROL_CONTROLTYPE_BASS           = MIXERCONTROL_CONTROLTYPE_FADER + 2;
 MIXERCONTROL_CONTROLTYPE_TREBLE         = MIXERCONTROL_CONTROLTYPE_FADER + 3;
 MIXERCONTROL_CONTROLTYPE_EQUALIZER      = MIXERCONTROL_CONTROLTYPE_FADER + 4;
 MIXERCONTROL_CONTROLTYPE_SINGLESELECT   = MIXERCONTROL_CT_CLASS_LIST or
                                           MIXERCONTROL_CT_SC_LIST_SINGLE or
                                           MIXERCONTROL_CT_UNITS_BOOLEAN;
 MIXERCONTROL_CONTROLTYPE_MUX            = MIXERCONTROL_CONTROLTYPE_SINGLESELECT + 1;
 MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = MIXERCONTROL_CT_CLASS_LIST or
                                           MIXERCONTROL_CT_SC_LIST_MULTIPLE or
                                           MIXERCONTROL_CT_UNITS_BOOLEAN;
 MIXERCONTROL_CONTROLTYPE_MIXER          = MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT + 1;
 MIXERCONTROL_CONTROLTYPE_MICROTIME      = MIXERCONTROL_CT_CLASS_TIME or
                                           MIXERCONTROL_CT_SC_TIME_MICROSECS or
                                           MIXERCONTROL_CT_UNITS_UNSIGNED;
 MIXERCONTROL_CONTROLTYPE_MILLITIME      = MIXERCONTROL_CT_CLASS_TIME or
                                           MIXERCONTROL_CT_SC_TIME_MILLISECS or
                                           MIXERCONTROL_CT_UNITS_UNSIGNED;

 MIXER_GETLINECONTROLSF_ALL              = $00000000;
 MIXER_GETLINECONTROLSF_ONEBYID          = $00000001;
 MIXER_GETLINECONTROLSF_ONEBYTYPE        = $00000002;
 MIXER_GETLINECONTROLSF_QUERYMASK        = $0000000F;
 MIXER_GETCONTROLDETAILSF_VALUE          = $00000000;
 MIXER_GETCONTROLDETAILSF_LISTTEXT       = $00000001;
 MIXER_GETCONTROLDETAILSF_QUERYMASK      = $0000000F;

 MIXER_SETCONTROLDETAILSF_VALUE          = $00000000;
 MIXER_SETCONTROLDETAILSF_CUSTOM         = $00000001;
 MIXER_SETCONTROLDETAILSF_QUERYMASK      = $0000000F;

 TIMERR_NOERROR            = $0000;
 TIMERR_NOCANDO            = TIMERR_BASE + $0001;
 TIMERR_STRUCT             = TIMERR_BASE + $0021;

 TIME_ONESHOT              = $0000;
 TIME_PERIODIC             = $0001;
 TIME_CALLBACK_FUNCTION    = $0000;
 TIME_CALLBACK_EVENT_SET   = $0010;
 TIME_CALLBACK_EVENT_PULSE = $0020;

 CFSEPCHAR                 = '+';

 MMIOERR_BASE              = $0100;
 MMIOERR_FILENOTFOUND      = MMIOERR_BASE + 1;
 MMIOERR_OUTOFMEMORY       = MMIOERR_BASE + 2;
 MMIOERR_CANNOTOPEN        = MMIOERR_BASE + 3;
 MMIOERR_CANNOTCLOSE       = MMIOERR_BASE + 4;
 MMIOERR_CANNOTREAD        = MMIOERR_BASE + 5;
 MMIOERR_CANNOTWRITE       = MMIOERR_BASE + 6;
 MMIOERR_CANNOTSEEK        = MMIOERR_BASE + 7;
 MMIOERR_CANNOTEXPAND      = MMIOERR_BASE + 8;
 MMIOERR_CHUNKNOTFOUND     = MMIOERR_BASE + 9;
 MMIOERR_UNBUFFERED        = MMIOERR_BASE + 10;
 MMIOERR_PATHNOTFOUND      = MMIOERR_BASE + 11;
 MMIOERR_ACCESSDENIED      = MMIOERR_BASE + 12;
 MMIOERR_SHARINGVIOLATION  = MMIOERR_BASE + 13;
 MMIOERR_NETWORKERROR      = MMIOERR_BASE + 14;
 MMIOERR_TOOMANYOPENFILES  = MMIOERR_BASE + 15;
 MMIOERR_INVALIDFILE       = MMIOERR_BASE + 16;

 MMIO_RWMODE               = $00000003;
 MMIO_SHAREMODE            = $00000070;
 MMIO_CREATE               = $00001000;
 MMIO_PARSE                = $00000100;
 MMIO_DELETE               = $00000200;
 MMIO_EXIST                = $00004000;
 MMIO_ALLOCBUF             = $00010000;
 MMIO_GETTEMP              = $00020000;
 MMIO_DIRTY                = $10000000;
 MMIO_READ                 = $00000000;
 MMIO_WRITE                = $00000001;
 MMIO_READWRITE            = $00000002;
 MMIO_COMPAT               = $00000000;
 MMIO_EXCLUSIVE            = $00000010;
 MMIO_DENYWRITE            = $00000020;
 MMIO_DENYREAD             = $00000030;
 MMIO_DENYNONE             = $00000040;
 MMIO_FHOPEN               = $00000010;
 MMIO_EMPTYBUF             = $00000010;
 MMIO_TOUPPER              = $00000010;
 MMIO_INSTALLPROC          = $00010000;
 MMIO_GLOBALPROC           = $10000000;
 MMIO_REMOVEPROC           = $00020000;
 MMIO_UNICODEPROC          = $01000000;
 MMIO_FINDPROC             = $00040000;
 MMIO_FINDCHUNK            = $00000010;
 MMIO_FINDRIFF             = $00000020;
 MMIO_FINDLIST             = $00000040;
 MMIO_CREATERIFF           = $00000020;
 MMIO_CREATELIST           = $00000040;

 MMIOM_READ                = MMIO_READ;
 MMIOM_WRITE               = MMIO_WRITE;
 MMIOM_SEEK                = $00000002;
 MMIOM_OPEN                = $00000003;
 MMIOM_CLOSE               = $00000004;
 MMIOM_WRITEFLUSH          = $00000005;
 MMIOM_RENAME              = $00000006;
 MMIOM_USER                = $00008000;
 MMIO_DEFAULTBUFFER        = $00002000;

 FOURCC_RIFF               = $46464952;
 FOURCC_LIST               = $5453494C;
 FOURCC_DOS                = $20532F44;
 FOURCC_MEM                = $204D454D;

 SEEK_SET                  = $0000;
 SEEK_CUR                  = $0001;
 SEEK_END                  = $0002;

 MCIERR_INVALID_DEVICE_ID        = MCIERR_BASE + 1;
 MCIERR_UNRECOGNIZED_KEYWORD     = MCIERR_BASE + 3;
 MCIERR_UNRECOGNIZED_COMMAND     = MCIERR_BASE + 5;
 MCIERR_HARDWARE                 = MCIERR_BASE + 6;
 MCIERR_INVALID_DEVICE_NAME      = MCIERR_BASE + 7;
 MCIERR_OUT_OF_MEMORY            = MCIERR_BASE + 8;
 MCIERR_DEVICE_OPEN              = MCIERR_BASE + 9;
 MCIERR_CANNOT_LOAD_DRIVER       = MCIERR_BASE + 10;
 MCIERR_MISSING_COMMAND_STRING   = MCIERR_BASE + 11;
 MCIERR_PARAM_OVERFLOW           = MCIERR_BASE + 12;
 MCIERR_MISSING_STRING_ARGUMENT  = MCIERR_BASE + 13;
 MCIERR_BAD_INTEGER              = MCIERR_BASE + 14;
 MCIERR_PARSER_INTERNAL          = MCIERR_BASE + 15;
 MCIERR_DRIVER_INTERNAL          = MCIERR_BASE + 16;
 MCIERR_MISSING_PARAMETER        = MCIERR_BASE + 17;
 MCIERR_UNSUPPORTED_FUNCTION     = MCIERR_BASE + 18;
 MCIERR_FILE_NOT_FOUND           = MCIERR_BASE + 19;
 MCIERR_DEVICE_NOT_READY         = MCIERR_BASE + 20;
 MCIERR_INTERNAL                 = MCIERR_BASE + 21;
 MCIERR_DRIVER                   = MCIERR_BASE + 22;
 MCIERR_CANNOT_USE_ALL           = MCIERR_BASE + 23;
 MCIERR_MULTIPLE                 = MCIERR_BASE + 24;
 MCIERR_EXTENSION_NOT_FOUND      = MCIERR_BASE + 25;
 MCIERR_OUTOFRANGE               = MCIERR_BASE + 26;
 MCIERR_FLAGS_NOT_COMPATIBLE     = MCIERR_BASE + 28;
 MCIERR_FILE_NOT_SAVED           = MCIERR_BASE + 30;
 MCIERR_DEVICE_TYPE_REQUIRED     = MCIERR_BASE + 31;
 MCIERR_DEVICE_LOCKED            = MCIERR_BASE + 32;
 MCIERR_DUPLICATE_ALIAS          = MCIERR_BASE + 33;
 MCIERR_BAD_CONSTANT             = MCIERR_BASE + 34;
 MCIERR_MUST_USE_SHAREABLE       = MCIERR_BASE + 35;
 MCIERR_MISSING_DEVICE_NAME      = MCIERR_BASE + 36;
 MCIERR_BAD_TIME_FORMAT          = MCIERR_BASE + 37;
 MCIERR_NO_CLOSING_QUOTE         = MCIERR_BASE + 38;
 MCIERR_DUPLICATE_FLAGS          = MCIERR_BASE + 39;
 MCIERR_INVALID_FILE             = MCIERR_BASE + 40;
 MCIERR_NULL_PARAMETER_BLOCK     = MCIERR_BASE + 41;
 MCIERR_UNNAMED_RESOURCE         = MCIERR_BASE + 42;
 MCIERR_NEW_REQUIRES_ALIAS       = MCIERR_BASE + 43;
 MCIERR_NOTIFY_ON_AUTO_OPEN      = MCIERR_BASE + 44;
 MCIERR_NO_ELEMENT_ALLOWED       = MCIERR_BASE + 45;
 MCIERR_NONAPPLICABLE_FUNCTION   = MCIERR_BASE + 46;
 MCIERR_ILLEGAL_FOR_AUTO_OPEN    = MCIERR_BASE + 47;
 MCIERR_FILENAME_REQUIRED        = MCIERR_BASE + 48;
 MCIERR_EXTRA_CHARACTERS         = MCIERR_BASE + 49;
 MCIERR_DEVICE_NOT_INSTALLED     = MCIERR_BASE + 50;
 MCIERR_GET_CD                   = MCIERR_BASE + 51;
 MCIERR_SET_CD                   = MCIERR_BASE + 52;
 MCIERR_SET_DRIVE                = MCIERR_BASE + 53;
 MCIERR_DEVICE_LENGTH            = MCIERR_BASE + 54;
 MCIERR_DEVICE_ORD_LENGTH        = MCIERR_BASE + 55;
 MCIERR_NO_INTEGER               = MCIERR_BASE + 56;

 MCIERR_WAVE_OUTPUTSINUSE        = MCIERR_BASE + 64;
 MCIERR_WAVE_SETOUTPUTINUSE      = MCIERR_BASE + 65;
 MCIERR_WAVE_INPUTSINUSE         = MCIERR_BASE + 66;
 MCIERR_WAVE_SETINPUTINUSE       = MCIERR_BASE + 67;
 MCIERR_WAVE_OUTPUTUNSPECIFIED   = MCIERR_BASE + 68;
 MCIERR_WAVE_INPUTUNSPECIFIED    = MCIERR_BASE + 69;
 MCIERR_WAVE_OUTPUTSUNSUITABLE   = MCIERR_BASE + 70;
 MCIERR_WAVE_SETOUTPUTUNSUITABLE = MCIERR_BASE + 71;
 MCIERR_WAVE_INPUTSUNSUITABLE    = MCIERR_BASE + 72;
 MCIERR_WAVE_SETINPUTUNSUITABLE  = MCIERR_BASE + 73;

 MCIERR_SEQ_DIV_INCOMPATIBLE     = MCIERR_BASE + 80;
 MCIERR_SEQ_PORT_INUSE           = MCIERR_BASE + 81;
 MCIERR_SEQ_PORT_NONEXISTENT     = MCIERR_BASE + 82;
 MCIERR_SEQ_PORT_MAPNODEVICE     = MCIERR_BASE + 83;
 MCIERR_SEQ_PORT_MISCERROR       = MCIERR_BASE + 84;
 MCIERR_SEQ_TIMER                = MCIERR_BASE + 85;
 MCIERR_SEQ_PORTUNSPECIFIED      = MCIERR_BASE + 86;
 MCIERR_SEQ_NOMIDIPRESENT        = MCIERR_BASE + 87;

 MCIERR_NO_WINDOW                = MCIERR_BASE + 90;
 MCIERR_CREATEWINDOW             = MCIERR_BASE + 91;
 MCIERR_FILE_READ                = MCIERR_BASE + 92;
 MCIERR_FILE_WRITE               = MCIERR_BASE + 93;

 MCIERR_NO_IDENTITY              = MCIERR_BASE + 94;
 MCIERR_CUSTOM_DRIVER_BASE       = MCIERR_BASE + 256;

 MCI_OPEN                        = $0803;
 MCI_CLOSE                       = $0804;
 MCI_ESCAPE                      = $0805;
 MCI_PLAY                        = $0806;
 MCI_SEEK                        = $0807;
 MCI_STOP                        = $0808;
 MCI_PAUSE                       = $0809;
 MCI_INFO                        = $080A;
 MCI_GETDEVCAPS                  = $080B;
 MCI_SPIN                        = $080C;
 MCI_SET                         = $080D;
 MCI_STEP                        = $080E;
 MCI_RECORD                      = $080F;
 MCI_SYSINFO                     = $0810;
 MCI_BREAK                       = $0811;
 MCI_SOUND                       = $0812;
 MCI_SAVE                        = $0813;
 MCI_STATUS                      = $0814;
 MCI_CUE                         = $0830;
 MCI_REALIZE                     = $0840;
 MCI_WINDOW                      = $0841;
 MCI_PUT                         = $0842;
 MCI_WHERE                       = $0843;
 MCI_FREEZE                      = $0844;
 MCI_UNFREEZE                    = $0845;
 MCI_LOAD                        = $0850;
 MCI_CUT                         = $0851;
 MCI_COPY                        = $0852;
 MCI_PASTE                       = $0853;
 MCI_UPDATE                      = $0854;
 MCI_RESUME                      = $0855;
 MCI_DELETE                      = $0856;

 MCI_USER_MESSAGES               = $400 + DRV_MCI_FIRST;
 MCI_LAST                        = $0FFF;

 MCI_ALL_DEVICE_ID               = $FFFFFFFF;

 MCI_DEVTYPE_VCR                 = MCI_STRING_OFFSET + 1;
 MCI_DEVTYPE_VIDEODISC           = MCI_STRING_OFFSET + 2;
 MCI_DEVTYPE_OVERLAY             = MCI_STRING_OFFSET + 3;
 MCI_DEVTYPE_CD_AUDIO            = MCI_STRING_OFFSET + 4;
 MCI_DEVTYPE_DAT                 = MCI_STRING_OFFSET + 5;
 MCI_DEVTYPE_SCANNER             = MCI_STRING_OFFSET + 6;
 MCI_DEVTYPE_ANIMATION           = MCI_STRING_OFFSET + 7;
 MCI_DEVTYPE_DIGITAL_VIDEO       = MCI_STRING_OFFSET + 8;
 MCI_DEVTYPE_OTHER               = MCI_STRING_OFFSET + 9;
 MCI_DEVTYPE_WAVEFORM_AUDIO      = MCI_STRING_OFFSET + 10;
 MCI_DEVTYPE_SEQUENCER           = MCI_STRING_OFFSET + 11;

 MCI_DEVTYPE_FIRST               = MCI_DEVTYPE_VCR;
 MCI_DEVTYPE_LAST                = MCI_DEVTYPE_SEQUENCER;

 MCI_DEVTYPE_FIRST_USER          = 1000;

 MCI_MODE_NOT_READY              = MCI_STRING_OFFSET + 12;
 MCI_MODE_STOP                   = MCI_STRING_OFFSET + 13;
 MCI_MODE_PLAY                   = MCI_STRING_OFFSET + 14;
 MCI_MODE_RECORD                 = MCI_STRING_OFFSET + 15;
 MCI_MODE_SEEK                   = MCI_STRING_OFFSET + 16;
 MCI_MODE_PAUSE                  = MCI_STRING_OFFSET + 17;
 MCI_MODE_OPEN                   = MCI_STRING_OFFSET + 18;

 MCI_FORMAT_MILLISECONDS         = 0;
 MCI_FORMAT_HMS                  = 1;
 MCI_FORMAT_MSF                  = 2;
 MCI_FORMAT_FRAMES               = 3;
 MCI_FORMAT_SMPTE_24             = 4;
 MCI_FORMAT_SMPTE_25             = 5;
 MCI_FORMAT_SMPTE_30             = 6;
 MCI_FORMAT_SMPTE_30DROP         = 7;
 MCI_FORMAT_BYTES                = 8;
 MCI_FORMAT_SAMPLES              = 9;
 MCI_FORMAT_TMSF                 = 10;

 MCI_NOTIFY_SUCCESSFUL           = $0001;
 MCI_NOTIFY_SUPERSEDED           = $0002;
 MCI_NOTIFY_ABORTED              = $0004;
 MCI_NOTIFY_FAILURE              = $0008;

 MCI_NOTIFY                      = $00000001;
 MCI_WAIT                        = $00000002;
 MCI_FROM                        = $00000004;
 MCI_TO                          = $00000008;
 MCI_TRACK                       = $00000010;

 MCI_OPEN_SHAREABLE              = $00000100;
 MCI_OPEN_ELEMENT                = $00000200;
 MCI_OPEN_ALIAS                  = $00000400;
 MCI_OPEN_ELEMENT_ID             = $00000800;
 MCI_OPEN_TYPE_ID                = $00001000;
 MCI_OPEN_TYPE                   = $00002000;

 MCI_SEEK_TO_START               = $00000100;
 MCI_SEEK_TO_END                 = $00000200;

 MCI_STATUS_ITEM                 = $00000100;
 MCI_STATUS_START                = $00000200;

 MCI_STATUS_LENGTH               = $00000001;
 MCI_STATUS_POSITION             = $00000002;
 MCI_STATUS_NUMBER_OF_TRACKS     = $00000003;
 MCI_STATUS_MODE                 = $00000004;
 MCI_STATUS_MEDIA_PRESENT        = $00000005;
 MCI_STATUS_TIME_FORMAT          = $00000006;
 MCI_STATUS_READY                = $00000007;
 MCI_STATUS_CURRENT_TRACK        = $00000008;

 MCI_INFO_PRODUCT                = $00000100;
 MCI_INFO_FILE                   = $00000200;
 MCI_INFO_MEDIA_UPC              = $00000400;
 MCI_INFO_MEDIA_IDENTITY         = $00000800;
 MCI_INFO_NAME                   = $00001000;
 MCI_INFO_COPYRIGHT              = $00002000;

 MCI_GETDEVCAPS_ITEM             = $00000100;
 MCI_GETDEVCAPS_CAN_RECORD       = $00000001;
 MCI_GETDEVCAPS_HAS_AUDIO        = $00000002;
 MCI_GETDEVCAPS_HAS_VIDEO        = $00000003;
 MCI_GETDEVCAPS_DEVICE_TYPE      = $00000004;
 MCI_GETDEVCAPS_USES_FILES       = $00000005;
 MCI_GETDEVCAPS_COMPOUND_DEVICE  = $00000006;
 MCI_GETDEVCAPS_CAN_EJECT        = $00000007;
 MCI_GETDEVCAPS_CAN_PLAY         = $00000008;
 MCI_GETDEVCAPS_CAN_SAVE         = $00000009;

 MCI_SYSINFO_QUANTITY            = $00000100;
 MCI_SYSINFO_OPEN                = $00000200;
 MCI_SYSINFO_NAME                = $00000400;
 MCI_SYSINFO_INSTALLNAME         = $00000800;
 MCI_SET_DOOR_OPEN               = $00000100;
 MCI_SET_DOOR_CLOSED             = $00000200;
 MCI_SET_TIME_FORMAT             = $00000400;
 MCI_SET_AUDIO                   = $00000800;
 MCI_SET_VIDEO                   = $00001000;
 MCI_SET_ON                      = $00002000;
 MCI_SET_OFF                     = $00004000;
 MCI_SET_AUDIO_ALL               = $00000000;
 MCI_SET_AUDIO_LEFT              = $00000001;
 MCI_SET_AUDIO_RIGHT             = $00000002;
 MCI_BREAK_KEY                   = $00000100;
 MCI_BREAK_HWND                  = $00000200;
 MCI_BREAK_OFF                   = $00000400;
 MCI_RECORD_INSERT               = $00000100;
 MCI_RECORD_OVERWRITE            = $00000200;
 MCI_SOUND_NAME                  = $00000100;
 MCI_SAVE_FILE                   = $00000100;
 MCI_LOAD_FILE                   = $00000100;

 MCI_VD_MODE_PARK                = MCI_VD_OFFSET + 1;
 MCI_VD_MEDIA_CLV                = MCI_VD_OFFSET + 2;
 MCI_VD_MEDIA_CAV                = MCI_VD_OFFSET + 3;
 MCI_VD_MEDIA_OTHER              = MCI_VD_OFFSET + 4;

 MCI_VD_FORMAT_TRACK             = $00004001;
 MCI_VD_PLAY_REVERSE             = $00010000;
 MCI_VD_PLAY_FAST                = $00020000;
 MCI_VD_PLAY_SPEED               = $00040000;
 MCI_VD_PLAY_SCAN                = $00080000;
 MCI_VD_PLAY_SLOW                = $00100000;
 MCI_VD_SEEK_REVERSE             = $00010000;
 MCI_VD_STATUS_SPEED             = $00004002;
 MCI_VD_STATUS_FORWARD           = $00004003;
 MCI_VD_STATUS_MEDIA_TYPE        = $00004004;
 MCI_VD_STATUS_SIDE              = $00004005;
 MCI_VD_STATUS_DISC_SIZE         = $00004006;
 MCI_VD_GETDEVCAPS_CLV           = $00010000;
 MCI_VD_GETDEVCAPS_CAV           = $00020000;
 MCI_VD_SPIN_UP                  = $00010000;
 MCI_VD_SPIN_DOWN                = $00020000;
 MCI_VD_GETDEVCAPS_CAN_REVERSE   = $00004002;
 MCI_VD_GETDEVCAPS_FAST_RATE     = $00004003;
 MCI_VD_GETDEVCAPS_SLOW_RATE     = $00004004;
 MCI_VD_GETDEVCAPS_NORMAL_RATE   = $00004005;
 MCI_VD_STEP_FRAMES              = $00010000;
 MCI_VD_STEP_REVERSE             = $00020000;
 MCI_VD_ESCAPE_STRING            = $00000100;

 MCI_CDA_STATUS_TYPE_TRACK       = $00004001;
 MCI_CDA_TRACK_AUDIO             = MCI_CD_OFFSET;
 MCI_CDA_TRACK_OTHER             = MCI_CD_OFFSET + 1;

 MCI_WAVE_PCM                    = MCI_WAVE_OFFSET;
 MCI_WAVE_MAPPER                 = MCI_WAVE_OFFSET + 1;
 MCI_WAVE_OPEN_BUFFER            = $00010000;
 MCI_WAVE_SET_FORMATTAG          = $00010000;
 MCI_WAVE_SET_CHANNELS           = $00020000;
 MCI_WAVE_SET_SAMPLESPERSEC      = $00040000;
 MCI_WAVE_SET_AVGBYTESPERSEC     = $00080000;
 MCI_WAVE_SET_BLOCKALIGN         = $00100000;
 MCI_WAVE_SET_BITSPERSAMPLE      = $00200000;
 MCI_WAVE_INPUT                  = $00400000;
 MCI_WAVE_OUTPUT                 = $00800000;
 MCI_WAVE_STATUS_FORMATTAG       = $00004001;
 MCI_WAVE_STATUS_CHANNELS        = $00004002;
 MCI_WAVE_STATUS_SAMPLESPERSEC   = $00004003;
 MCI_WAVE_STATUS_AVGBYTESPERSEC  = $00004004;
 MCI_WAVE_STATUS_BLOCKALIGN      = $00004005;
 MCI_WAVE_STATUS_BITSPERSAMPLE   = $00004006;
 MCI_WAVE_STATUS_LEVEL           = $00004007;
 MCI_WAVE_SET_ANYINPUT           = $04000000;
 MCI_WAVE_SET_ANYOUTPUT          = $08000000;
 MCI_WAVE_GETDEVCAPS_INPUTS      = $00004001;
 MCI_WAVE_GETDEVCAPS_OUTPUTS     = $00004002;

 MCI_SEQ_DIV_PPQN                = MCI_SEQ_OFFSET;
 MCI_SEQ_DIV_SMPTE_24            = MCI_SEQ_OFFSET + 1;
 MCI_SEQ_DIV_SMPTE_25            = MCI_SEQ_OFFSET + 2;
 MCI_SEQ_DIV_SMPTE_30DROP        = MCI_SEQ_OFFSET + 3;
 MCI_SEQ_DIV_SMPTE_30            = MCI_SEQ_OFFSET + 4;

 MCI_SEQ_FORMAT_SONGPTR          = $00004001;
 MCI_SEQ_FILE                    = $00004002;
 MCI_SEQ_MIDI                    = $00004003;
 MCI_SEQ_SMPTE                   = $00004004;
 MCI_SEQ_NONE                    = $0000FFFD;
 MCI_SEQ_MAPPER                  = $0000FFFF;

 MCI_SEQ_STATUS_TEMPO            = $00004002;
 MCI_SEQ_STATUS_PORT             = $00004003;
 MCI_SEQ_STATUS_SLAVE            = $00004007;
 MCI_SEQ_STATUS_MASTER           = $00004008;
 MCI_SEQ_STATUS_OFFSET           = $00004009;
 MCI_SEQ_STATUS_DIVTYPE          = $0000400A;
 MCI_SEQ_STATUS_NAME             = $0000400B;
 MCI_SEQ_STATUS_COPYRIGHT        = $0000400C;
 MCI_SEQ_SET_TEMPO               = $00010000;
 MCI_SEQ_SET_PORT                = $00020000;
 MCI_SEQ_SET_SLAVE               = $00040000;
 MCI_SEQ_SET_MASTER              = $00080000;
 MCI_SEQ_SET_OFFSET              = $01000000;

 MCI_ANIM_OPEN_WS                = $00010000;
 MCI_ANIM_OPEN_PARENT            = $00020000;
 MCI_ANIM_OPEN_NOSTATIC          = $00040000;
 MCI_ANIM_PLAY_SPEED             = $00010000;
 MCI_ANIM_PLAY_REVERSE           = $00020000;
 MCI_ANIM_PLAY_FAST              = $00040000;
 MCI_ANIM_PLAY_SLOW              = $00080000;
 MCI_ANIM_PLAY_SCAN              = $00100000;
 MCI_ANIM_STEP_REVERSE           = $00010000;
 MCI_ANIM_STEP_FRAMES            = $00020000;
 MCI_ANIM_STATUS_SPEED           = $00004001;
 MCI_ANIM_STATUS_FORWARD         = $00004002;
 MCI_ANIM_STATUS_HWND            = $00004003;
 MCI_ANIM_STATUS_HPAL            = $00004004;
 MCI_ANIM_STATUS_STRETCH         = $00004005;
 MCI_ANIM_INFO_TEXT              = $00010000;
 MCI_ANIM_GETDEVCAPS_CAN_REVERSE = $00004001;
 MCI_ANIM_GETDEVCAPS_FAST_RATE   = $00004002;
 MCI_ANIM_GETDEVCAPS_SLOW_RATE   = $00004003;
 MCI_ANIM_GETDEVCAPS_NORMAL_RATE = $00004004;
 MCI_ANIM_GETDEVCAPS_PALETTES    = $00004006;
 MCI_ANIM_GETDEVCAPS_CAN_STRETCH = $00004007;
 MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = $00004008;
 MCI_ANIM_REALIZE_NORM           = $00010000;
 MCI_ANIM_REALIZE_BKGD           = $00020000;
 MCI_ANIM_WINDOW_HWND            = $00010000;
 MCI_ANIM_WINDOW_STATE           = $00040000;
 MCI_ANIM_WINDOW_TEXT            = $00080000;
 MCI_ANIM_WINDOW_ENABLE_STRETCH  = $00100000;
 MCI_ANIM_WINDOW_DISABLE_STRETCH = $00200000;
 MCI_ANIM_WINDOW_DEFAULT         = $00000000;
 MCI_ANIM_RECT                   = $00010000;
 MCI_ANIM_PUT_SOURCE             = $00020000;
 MCI_ANIM_PUT_DESTINATION        = $00040000;
 MCI_ANIM_WHERE_SOURCE           = $00020000;
 MCI_ANIM_WHERE_DESTINATION      = $00040000;
 MCI_ANIM_UPDATE_HDC             = $00020000;

 MCI_OVLY_OPEN_WS                = $00010000;
 MCI_OVLY_OPEN_PARENT            = $00020000;
 MCI_OVLY_STATUS_HWND            = $00004001;
 MCI_OVLY_STATUS_STRETCH         = $00004002;
 MCI_OVLY_INFO_TEXT              = $00010000;
 MCI_OVLY_GETDEVCAPS_CAN_STRETCH = $00004001;
 MCI_OVLY_GETDEVCAPS_CAN_FREEZE  = $00004002;
 MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = $00004003;
 MCI_OVLY_WINDOW_HWND            = $00010000;
 MCI_OVLY_WINDOW_STATE           = $00040000;
 MCI_OVLY_WINDOW_TEXT            = $00080000;
 MCI_OVLY_WINDOW_ENABLE_STRETCH  = $00100000;
 MCI_OVLY_WINDOW_DISABLE_STRETCH = $00200000;
 MCI_OVLY_WINDOW_DEFAULT         = $00000000;
 MCI_OVLY_RECT                   = $00010000;
 MCI_OVLY_PUT_SOURCE             = $00020000;
 MCI_OVLY_PUT_DESTINATION        = $00040000;
 MCI_OVLY_PUT_FRAME              = $00080000;
 MCI_OVLY_PUT_VIDEO              = $00100000;
 MCI_OVLY_WHERE_SOURCE           = $00020000;
 MCI_OVLY_WHERE_DESTINATION      = $00040000;
 MCI_OVLY_WHERE_FRAME            = $00080000;
 MCI_OVLY_WHERE_VIDEO            = $00100000;

 MCI_MCIAVI_PLAY_WINDOW          = $01000000;
 MCI_MCIAVI_PLAY_FULLSCREEN      = $02000000;
 MCI_MCIAVI_PLAY_FULLBY2         = $04000000;
 MCI_DGV_PLAY_REPEAT             = $00010000;
 MCI_DGV_PLAY_REVERSE            = $00020000;



(*
  Returns number of frames not drawn during last play.  If this number
  is more than a small fraction of the number of frames that should have
  been displayed, things aren't looking good.
*)
  MCI_AVI_STATUS_FRAMES_SKIPPED  = $8001;

(*
  Returns a number representing how well the last AVI play worked.
  A result of 1000 indicates that the AVI sequence took the amount
  of time to play that it should have; a result of 2000, for instance,
  would indicate that a 5-second AVI sequence took 10 seconds to play,
  implying that the audio and video were badly broken up.
*)
  MCI_AVI_STATUS_LAST_PLAY_SPEED = $8002;

(*
   Returns the number of times that the audio definitely broke up.
   (We count one for every time we're about to write some audio data
   to the driver, and we notice that it's already played all of the
   data we have.
*)
  MCI_AVI_STATUS_AUDIO_BREAKS    = $8003;


  MCI_AVI_SETVIDEO_DRAW_PROCEDURE = $8000;

  MCI_AVI_SETVIDEO_PALETTE_COLOR  = $8100;


(*
  This constant specifies that the "halftone" palette should be
  used, rather than the default palette.
*)
  MCI_AVI_SETVIDEO_PALETTE_HALFTONE = $0000FFFF;

(*
  Custom error return values
*)
  MCIERR_AVI_OLDAVIFORMAT        = MCIERR_CUSTOM_DRIVER_BASE + 100;
  MCIERR_AVI_NOTINTERLEAVED      = MCIERR_CUSTOM_DRIVER_BASE + 101;
  MCIERR_AVI_NODISPDIB           = MCIERR_CUSTOM_DRIVER_BASE + 102;
  MCIERR_AVI_CANTPLAYFULLSCREEN  = MCIERR_CUSTOM_DRIVER_BASE + 103;
  MCIERR_AVI_TOOBIGFORVGA        = MCIERR_CUSTOM_DRIVER_BASE + 104;
  MCIERR_AVI_NOCOMPRESSOR        = MCIERR_CUSTOM_DRIVER_BASE + 105;
  MCIERR_AVI_DISPLAYERROR        = MCIERR_CUSTOM_DRIVER_BASE + 106;
  MCIERR_AVI_AUDIOERROR          = MCIERR_CUSTOM_DRIVER_BASE + 107;
  MCIERR_AVI_BADPALETTE          = MCIERR_CUSTOM_DRIVER_BASE + 108;

type
 VERSION = UINT;
 MMVERSION = UINT;
 MMRESULT = UINT;

 PMMTime = ^TMMTime;
 TMMTime = record
   case wType: UINT of
    TIME_MS:      (ms: DWORD);
    TIME_SAMPLES: (sample: DWORD);
    TIME_BYTES:   (cb: DWORD);
    TIME_TICKS:   (ticks: DWORD);
    TIME_SMPTE: (
       hour: Byte;
       min: Byte;
       sec: Byte;
       frame: Byte;
       fps: Byte;
       dummy: Byte;
       pad: array[0..1] of Byte);
     TIME_MIDI : (songptrpos: DWORD);
 end;

 HDRVR = LongInt;

 PDrvConfigInfoEx = ^TDrvConfigInfoEx;
 TDrvConfigInfoEx = packed record
   dwDCISize: DWORD;
   lpszDCISectionName: PWideChar;
   lpszDCIAliasName: PWideChar;
   dnDevNode: DWORD;
 end;

 PDrvConfigInfo = ^TDrvConfigInfo;
 TDrvConfigInfo = packed record
   dwDCISize: DWORD;
   lpszDCISectionName: PWideChar;
   lpszDCIAliasName: PWideChar;
 end;

 TFNDriverProc = function conv arg_stdcall (dwDriverId: DWORD; hdrvr: HDRVR;
   msg: UINT; lparam1, lparam2: LPARAM): Longint;

 TFNDrvCallBack = procedure conv arg_stdcall (hdrvr: HDRVR; uMsg: UINT; dwUser: DWORD;
   dw1, dw2: DWORD);

 PHWAVE = ^HWAVE;
 HWAVE = LongInt;
 PHWAVEIN = ^HWAVEIN;
 HWAVEIN = LongInt;
 PHWAVEOUT = ^HWAVEOUT;
 HWAVEOUT = LongInt;

 TFNWaveCallBack = TFNDrvCallBack;

 PWaveHdr = ^TWaveHdr;
 TWaveHdr = record
   lpData: PChar;
   dwBufferLength: DWORD;
   dwBytesRecorded: DWORD;
   dwUser: DWORD;
   dwFlags: DWORD;
   dwLoops: DWORD;
   lpNext: PWaveHdr;
   reserved: DWORD;
 end;

 PWaveOutCapsA = ^TWaveOutCapsA;
 PWaveOutCapsW = ^TWaveOutCapsW;
 PWaveOutCaps = PWaveOutCapsA;
 TWaveOutCapsA = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of AnsiChar;
   dwFormats: DWORD;
   wChannels: Word;
   dwSupport: DWORD;
 end;
 TWaveOutCapsW = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of WideChar;
   dwFormats: DWORD;
   wChannels: Word;
   dwSupport: DWORD;
 end;
 TWaveOutCaps = TWaveOutCapsA;

 PWaveInCapsA = ^TWaveInCapsA;
 PWaveInCapsW = ^TWaveInCapsW;
 PWaveInCaps = PWaveInCapsA;
 TWaveInCapsA = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of AnsiChar;
   dwFormats: DWORD;
   wChannels: Word;
   wReserved1: Word;
 end;
 TWaveInCapsW = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of WideChar;
   dwFormats: DWORD;
   wChannels: Word;
   wReserved1: Word;
 end;
 TWaveInCaps = TWaveInCapsA;

 PWaveFormat = ^TWaveFormat;
  TWaveFormat = packed record
    wFormatTag: Word;
    nChannels: Word;
    nSamplesPerSec: DWORD;
    nAvgBytesPerSec: DWORD;
    nBlockAlign: Word;
  end;

 PPCMWaveFormat = ^TPCMWaveFormat;
 TPCMWaveFormat = record
     wf: TWaveFormat;
     wBitsPerSample: Word;
  end;

 PWaveFormatEx = ^TWaveFormatEx;
 TWaveFormatEx = record
   wFormatTag: Word;
   nChannels: Word;
   nSamplesPerSec: DWORD;
   nAvgBytesPerSec: DWORD;
   nBlockAlign: Word;
   wBitsPerSample: Word;
   cbSize: Word;
 end;

 PHMIDI = ^HMIDI;
 HMIDI = LongInt;
 PHMIDIIN = ^HMIDIIN;
 HMIDIIN = LongInt;
 PHMIDIOUT = ^HMIDIOUT;
 HMIDIOUT = LongInt;
 PHMIDISTRM = ^HMIDISTRM;
 HMIDISTRM = LongInt;

 TFNMidiCallBack = TFNDrvCallBack;

 PPatchArray = ^TPatchArray;
 TPatchArray = array[0..MIDIPATCHSIZE-1] of Word;

 PKeyArray = ^TKeyArray;
 TKeyArray = array[0..MIDIPATCHSIZE-1] of Word;

 PMidiOutCapsA = ^TMidiOutCapsA;
 PMidiOutCapsW = ^TMidiOutCapsW;
 PMidiOutCaps = PMidiOutCapsA;
 TMidiOutCapsA = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of AnsiChar;
   wTechnology: Word;
   wVoices: Word;
   wNotes: Word;
   wChannelMask: Word;
   dwSupport: DWORD;
 end;
 TMidiOutCapsW = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of WideChar;
   wTechnology: Word;
   wVoices: Word;
   wNotes: Word;
   wChannelMask: Word;
   dwSupport: DWORD;
 end;
 TMidiOutCaps = TMidiOutCapsA;

 PMidiInCapsA = ^TMidiInCapsA;
 PMidiInCapsW = ^TMidiInCapsW;
 PMidiInCaps = PMidiInCapsA;
 TMidiInCapsA = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of AnsiChar;
   dwSupport: DWORD;
 end;
 TMidiInCapsW = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of WideChar;
   dwSupport: DWORD;
 end;
 TMidiInCaps = TMidiInCapsA;

 PMidiHdr = ^TMidiHdr;
 TMidiHdr = record
   lpData: PChar;
   dwBufferLength: DWORD;
   dwBytesRecorded: DWORD;
   dwUser: DWORD;
   dwFlags: DWORD;
   lpNext: PMidiHdr;
   reserved: DWORD;
   dwOffset: DWORD;
   dwReserved: array[0..7] of DWORD;
 end;

 PMidiEvent = ^TMidiEvent;
 TMidiEvent = record
   dwDeltaTime: DWORD;
   dwStreamID: DWORD;
   dwEvent: DWORD;
   dwParms: array[0..0] of DWORD;
 end;

 PMidiStrmBuffVer = ^TMidiStrmBuffVer;
 TMidiStrmBuffVer = record
   dwVersion: DWORD;
   dwMid: DWORD;
   dwOEMVersion: DWORD;
 end;

 PMidiPropTimeDiv = ^TMidiPropTimeDiv;
 TMidiPropTimeDiv = record
   cbStruct: DWORD;
   dwTimeDiv: DWORD;
 end;

 PMidiPropTempo = ^TMidiPropTempo;
 TMidiPropTempo = record
   cbStruct: DWORD;
   dwTempo: DWORD;
 end;

 PAuxCapsA = ^TAuxCapsA;
 PAuxCapsW = ^TAuxCapsW;
 PAuxCaps = PAuxCapsA;
 TAuxCapsA = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of AnsiChar;
   wTechnology: Word;
   dwSupport: DWORD;
 end;
 TAuxCapsW = record
   wMid: Word;
   wPid: Word;
   vDriverVersion: MMVERSION;
   szPname: array[0..MAXPNAMELEN-1] of WideChar;
   wTechnology: Word;
   dwSupport: DWORD;
 end;
 TAuxCaps = TAuxCapsA;

 PHMIXEROBJ = ^HMIXEROBJ;
 HMIXEROBJ = LongInt;

 PHMIXER = ^HMIXER;
 HMIXER = LongInt;

 PMixerCapsA = ^TMixerCapsA;
 PMixerCapsW = ^TMixerCapsW;
 PMixerCaps = PMixerCapsA;
 TMixerCapsA = record
   wMid: WORD;
   wPid: WORD;
   vDriverVersion: MMVERSION;
   szPname: array [0..MAXPNAMELEN - 1] of AnsiChar;
   fdwSupport: DWORD;
   cDestinations: DWORD;
 end;
 TMixerCapsW = record
   wMid: WORD;
   wPid: WORD;
   vDriverVersion: MMVERSION;
   szPname: array [0..MAXPNAMELEN - 1] of WideChar;
   fdwSupport: DWORD;
   cDestinations: DWORD;
 end;
 TMixerCaps = TMixerCapsA;

 PMixerLineA = ^TMixerLineA;
 PMixerLineW = ^TMixerLineW;
 PMixerLine = PMixerLineA;
 TMixerLineA = record
   cbStruct: DWORD;
   dwDestination: DWORD;
   dwSource: DWORD;
   dwLineID: DWORD;
   fdwLine: DWORD;
   dwUser: DWORD;
   dwComponentType: DWORD;
   cChannels: DWORD;
   cConnections: DWORD;
   cControls: DWORD;
   szShortName: array[0..MIXER_SHORT_NAME_CHARS - 1] of AnsiChar;
   szName: array[0..MIXER_LONG_NAME_CHARS - 1] of AnsiChar;
   Target: record
     dwType: DWORD;
     dwDeviceID: DWORD;
     wMid: WORD;
     wPid: WORD;
     vDriverVersion: MMVERSION;
     szPname: array[0..MAXPNAMELEN - 1] of AnsiChar;
        end;
 end;
 TMixerLineW = record
   cbStruct: DWORD;
   dwDestination: DWORD;
   dwSource: DWORD;
   dwLineID: DWORD;
   fdwLine: DWORD;
   dwUser: DWORD;
   dwComponentType: DWORD;
   cChannels: DWORD;
   cConnections: DWORD;
   cControls: DWORD;
   szShortName: array[0..MIXER_SHORT_NAME_CHARS - 1] of WideChar;
   szName: array[0..MIXER_LONG_NAME_CHARS - 1] of WideChar;
   Target: record
     dwType: DWORD;
     dwDeviceID: DWORD;
     wMid: WORD;
     wPid: WORD;
     vDriverVersion: MMVERSION;
     szPname: array[0..MAXPNAMELEN - 1] of WideChar;
        end;
 end;
 TMixerLine = TMixerLineA;

 PMixerControlA = ^TMixerControlA;
 PMixerControlW = ^TMixerControlW;
 PMixerControl = PMixerControlA;
 TMixerControlA = packed record
   cbStruct: DWORD;
   dwControlID: DWORD;
   dwControlType: DWORD;
   fdwControl: DWORD;
   cMultipleItems: DWORD;
   szShortName: array[0..MIXER_SHORT_NAME_CHARS - 1] of AnsiChar;
   szName: array[0..MIXER_LONG_NAME_CHARS - 1] of AnsiChar;
   Bounds: record
     case LongInt of
       0: (lMinimum, lMaximum: Longint);
       1: (dwMinimum, dwMaximum: DWORD);
       2: (dwReserved: array[0..5] of DWORD);
   end;
   Metrics: record
     case LongInt of
       0: (cSteps: DWORD);
       1: (cbCustomData: DWORD);
       2: (dwReserved: array[0..5] of DWORD);
   end;
 end;
 TMixerControlW = packed record
   cbStruct: DWORD;
   dwControlID: DWORD;
   dwControlType: DWORD;
   fdwControl: DWORD;
   cMultipleItems: DWORD;
   szShortName: array[0..MIXER_SHORT_NAME_CHARS - 1] of WideChar;
   szName: array[0..MIXER_LONG_NAME_CHARS - 1] of WideChar;
   Bounds: record
     case LongInt of
       0: (lMinimum, lMaximum: Longint);
       1: (dwMinimum, dwMaximum: DWORD);
       2: (dwReserved: array[0..5] of DWORD);
   end;
   Metrics: record
     case LongInt of
       0: (cSteps: DWORD);
       1: (cbCustomData: DWORD);
       2: (dwReserved: array[0..5] of DWORD);
   end;
 end;
 TMixerControl = TMixerControlA;

 PMixerLineControlsA = ^TMixerLineControlsA;
 PMixerLineControlsW = ^TMixerLineControlsW;
 PMixerLineControls = PMixerLineControlsA;
 TMixerLineControlsA = record
   cbStruct: DWORD;
   dwLineID: DWORD;
   case LongInt of
     0: (dwControlID: DWORD);
     1: (dwControlType: DWORD;
         cControls: DWORD;
         cbmxctrl: DWORD;
         pamxctrl: PMixerControlA);
 end;
 TMixerLineControlsW = record
   cbStruct: DWORD;
   dwLineID: DWORD;
   case LongInt of
     0: (dwControlID: DWORD);
     1: (dwControlType: DWORD;
         cControls: DWORD;
         cbmxctrl: DWORD;
         pamxctrl: PMixerControlW);
 end;
 TMixerLineControls = TMixerLineControlsA;

 PMixerControlDetails = ^TMixerControlDetails;
 TMixerControlDetails = record
   cbStruct: DWORD;
   dwControlID: DWORD;
   cChannels: DWORD;
   case LongInt of
          0: (hwndOwner: HWND);
          1: (cMultipleItems: DWORD;
              cbDetails: DWORD;
              paDetails: Pointer);
 end;

 PMixerControlDetailsListTextA = ^TMixerControlDetailsListTextA;
 PMixerControlDetailsListTextW = ^TMixerControlDetailsListTextW;
 PMixerControlDetailsListText = PMixerControlDetailsListTextA;
 TMixerControlDetailsListTextA = record
   dwParam1: DWORD;
   dwParam2: DWORD;
   szName: array[0..MIXER_LONG_NAME_CHARS - 1] of AnsiChar;
 end;
 TMixerControlDetailsListTextW = record
   dwParam1: DWORD;
   dwParam2: DWORD;
   szName: array[0..MIXER_LONG_NAME_CHARS - 1] of WideChar;
 end;
 TMixerControlDetailsListText = TMixerControlDetailsListTextA;

 PMixerControlDetailsBoolean = ^TMixerControlDetailsBoolean;
 TMixerControlDetailsBoolean = record
   fValue: Longint;
 end;

 PMixerControlDetailsSigned = ^TMixerControlDetailsSigned;
 TMixerControlDetailsSigned = record
   lValue: Longint;
 end;

 PMixerControlDetailsUnsigned = ^TMixerControlDetailsUnsigned;
 TMixerControlDetailsUnsigned = record
   dwValue: DWORD;
 end;

 TFNTimeCallBack = procedure conv arg_stdcall (uTimerID, uMessage: UINT;
   dwUser, dw1, dw2: DWORD);

 PTimeCaps = ^TTimeCaps;
 TTimeCaps = record
   wPeriodMin: UINT;
   wPeriodMax: UINT;
 end;

 PJoyCapsA = ^TJoyCapsA;
 PJoyCapsW = ^TJoyCapsW;
 PJoyCaps = PJoyCapsA;
 TJoyCapsA = record
   wMid: Word;
   wPid: Word;
   szPname: array[0..MAXPNAMELEN-1] of AnsiChar;
   wXmin: UINT;
   wXmax: UINT;
   wYmin: UINT;
   wYmax: UINT;
   wZmin: UINT;
   wZmax: UINT;
   wNumButtons: UINT;
   wPeriodMin: UINT;
   wPeriodMax: UINT;
   wRmin: UINT;
   wRmax: UINT;
   wUmin: UINT;
   wUmax: UINT;
   wVmin: UINT;
   wVmax: UINT;
   wCaps: UINT;
   wMaxAxes: UINT;
   wNumAxes: UINT;
   wMaxButtons: UINT;
   szRegKey: array[0..MAXPNAMELEN - 1] of AnsiChar;
   szOEMVxD: array[0..MAX_JOYSTICKOEMVXDNAME - 1] of AnsiChar;
 end;
 TJoyCapsW = record
   wMid: Word;
   wPid: Word;
   szPname: array[0..MAXPNAMELEN-1] of WideChar;
   wXmin: UINT;
   wXmax: UINT;
   wYmin: UINT;
   wYmax: UINT;
   wZmin: UINT;
   wZmax: UINT;
   wNumButtons: UINT;
   wPeriodMin: UINT;
   wPeriodMax: UINT;
   wRmin: UINT;
   wRmax: UINT;
   wUmin: UINT;
   wUmax: UINT;
   wVmin: UINT;
   wVmax: UINT;
   wCaps: UINT;
   wMaxAxes: UINT;
   wNumAxes: UINT;
   wMaxButtons: UINT;
   szRegKey: array[0..MAXPNAMELEN - 1] of WideChar;
   szOEMVxD: array[0..MAX_JOYSTICKOEMVXDNAME - 1] of WideChar;
 end;
 TJoyCaps = TJoyCapsA;

 PJoyInfo = ^TJoyInfo;
 TJoyInfo = record
   wXpos: UINT;
   wYpos: UINT;
   wZpos: UINT;
   wButtons: UINT;
 end;

 PJoyInfoEx = ^TJoyInfoEx;
 TJoyInfoEx = record
   dwSize: DWORD;
   dwFlags: DWORD;
   wXpos: UINT;
   wYpos: UINT;
   wZpos: UINT;
   dwRpos: DWORD;
   dwUpos: DWORD;
   dwVpos: DWORD;
   wButtons: UINT;
   dwButtonNumber: DWORD;
   dwPOV: DWORD;
   dwReserved1: DWORD;
   dwReserved2: DWORD;
 end;

 FOURCC = DWORD;

 PHMMIO = ^HMMIO;
 HMMIO = LongInt;

 TFNMMIOProc = function conv arg_stdcall (lpmmioinfo: PChar; uMessage: UINT;
  lParam1, lParam2: LPARAM): Longint;

 PMMIOInfo = ^TMMIOInfo;
 TMMIOInfo = record
   dwFlags: DWORD;
   fccIOProc: FOURCC;
   pIOProc: TFNMMIOProc;
   wErrorRet: UINT;
   hTask: HTASK;
   cchBuffer: Longint;
   pchBuffer: PChar;
   pchNext: PChar;
   pchEndRead: PChar;
   pchEndWrite: PChar;
   lBufOffset: Longint;
   lDiskOffset: Longint;
   adwInfo: array[0..2] of DWORD;
   dwReserved1: DWORD;
   dwReserved2: DWORD;
   hmmio: HMMIO;
 end;

 PMMCKInfo = ^TMMCKInfo;
 TMMCKInfo = record
   ckid: FOURCC;
   cksize: DWORD;
   fccType: FOURCC;
   dwDataOffset: DWORD;
   dwFlags: DWORD;
 end;

 MCIERROR = DWORD;
 MCIDEVICEID = UINT;

 TFNYieldProc = function conv arg_stdcall (mciId: MCIDEVICEID;
  dwYieldData: DWORD): UINT;

 PMCI_Generic_Parms = ^TMCI_Generic_Parms;
 TMCI_Generic_Parms = record
   dwCallback: DWORD;
 end;

 PMCI_Open_ParmsA = ^TMCI_Open_ParmsA;
 PMCI_Open_ParmsW = ^TMCI_Open_ParmsW;
 PMCI_Open_Parms = PMCI_Open_ParmsA;
 TMCI_Open_ParmsA = record
   dwCallback: DWORD;
   wDeviceID: MCIDEVICEID;
   lpstrDeviceType: PAnsiChar;
   lpstrElementName: PAnsiChar;
   lpstrAlias: PAnsiChar;
 end;
 TMCI_Open_ParmsW = record
   dwCallback: DWORD;
   wDeviceID: MCIDEVICEID;
   lpstrDeviceType: PWideChar;
   lpstrElementName: PWideChar;
   lpstrAlias: PWideChar;
 end;
 TMCI_Open_Parms = TMCI_Open_ParmsA;

 PMCI_Play_Parms = ^TMCI_Play_Parms;
 TMCI_Play_Parms = record
   dwCallback: DWORD;
   dwFrom: DWORD;
   dwTo: DWORD;
 end;

 PMCI_Seek_Parms = ^TMCI_Seek_Parms;
 TMCI_Seek_Parms = record
   dwCallback: DWORD;
   dwTo: DWORD;
 end;

 PMCI_Status_Parms = ^TMCI_Status_Parms;
 TMCI_Status_Parms = record
   dwCallback: DWORD;
   dwReturn: DWORD;
   dwItem: DWORD;
   dwTrack: DWORD;
 end;

 PMCI_Info_ParmsA = ^TMCI_Info_ParmsA;
 PMCI_Info_ParmsW = ^TMCI_Info_ParmsW;
 PMCI_Info_Parms = PMCI_Info_ParmsA;
 TMCI_Info_ParmsA = record
   dwCallback: DWORD;
   lpstrReturn: PAnsiChar;
   dwRetSize: DWORD;
 end;
 TMCI_Info_ParmsW = record
   dwCallback: DWORD;
   lpstrReturn: PWideChar;
   dwRetSize: DWORD;
 end;
 TMCI_Info_Parms = TMCI_Info_ParmsA;

 PMCI_GetDevCaps_Parms = ^TMCI_GetDevCaps_Parms;
 TMCI_GetDevCaps_Parms = record
   dwCallback: DWORD;
   dwReturn: DWORD;
   dwItem: DWORD;
 end;

 PMCI_SysInfo_ParmsA = ^TMCI_SysInfo_ParmsA;
 PMCI_SysInfo_ParmsW = ^TMCI_SysInfo_ParmsW;
 PMCI_SysInfo_Parms = PMCI_SysInfo_ParmsA;
 TMCI_SysInfo_ParmsA = record
   dwCallback: DWORD;
   lpstrReturn: PAnsiChar;
   dwRetSize: DWORD;
   dwNumber: DWORD;
   wDeviceType: UINT;
 end;
 TMCI_SysInfo_ParmsW = record
   dwCallback: DWORD;
   lpstrReturn: PWideChar;
   dwRetSize: DWORD;
   dwNumber: DWORD;
   wDeviceType: UINT;
 end;
 TMCI_SysInfo_Parms = TMCI_SysInfo_ParmsA;

 PMCI_Set_Parms = ^TMCI_Set_Parms;
 TMCI_Set_Parms = record
   dwCallback: DWORD;
   dwTimeFormat: DWORD;
   dwAudio: DWORD;
 end;

 PMCI_Break_Parms = ^TMCI_BReak_Parms;
 TMCI_BReak_Parms = record
   dwCallback: DWORD;
   nVirtKey: LongInt;
   hWndBreak: HWND;
 end;

 PMCI_Sound_Parms = ^TMCI_Sound_Parms;
 TMCI_Sound_Parms = record
   dwCallback: Longint;
   lpstrSoundName: PChar;
 end;

 PMCI_Save_ParmsA = ^TMCI_SaveParmsA;
 PMCI_Save_ParmsW = ^TMCI_SaveParmsW;
 PMCI_Save_Parms = PMCI_Save_ParmsA;
 TMCI_SaveParmsA = record
   dwCallback: DWORD;
   lpfilename: PAnsiChar;
 end;
 TMCI_SaveParmsW = record
   dwCallback: DWORD;
   lpfilename: PWideChar;
 end;
 TMCI_SaveParms = TMCI_SaveParmsA;

 PMCI_Load_ParmsA = ^TMCI_Load_ParmsA;
 PMCI_Load_ParmsW = ^TMCI_Load_ParmsW;
 PMCI_Load_Parms = PMCI_Load_ParmsA;
 TMCI_Load_ParmsA = record
   dwCallback: DWORD;
   lpfilename: PAnsiChar;
 end;
 TMCI_Load_ParmsW = record
   dwCallback: DWORD;
   lpfilename: PWideChar;
 end;
 TMCI_Load_Parms = TMCI_Load_ParmsA;

 PMCI_Record_Parms = ^TMCI_Record_Parms;
 TMCI_Record_Parms = record
   dwCallback: DWORD;
   dwFrom: DWORD;
   dwTo: DWORD;
 end;

 PMCI_VD_Play_Parms = ^TMCI_VD_Play_Parms;
 TMCI_VD_Play_Parms = record
   dwCallback: DWORD;
   dwFrom: DWORD;
   dwTo: DWORD;
   dwSpeed: DWORD;
 end;

 PMCI_VD_Step_Parms = ^TMCI_VD_Step_Parms;
 TMCI_VD_Step_Parms = record
   dwCallback: DWORD;
   dwFrames: DWORD;
 end;

 PMCI_VD_Escape_ParmsA = ^TMCI_VD_Escape_ParmsA;
 PMCI_VD_Escape_ParmsW = ^TMCI_VD_Escape_ParmsW;
 PMCI_VD_Escape_Parms = PMCI_VD_Escape_ParmsA;
 TMCI_VD_Escape_ParmsA = record
   dwCallback: DWORD;
   lpstrCommand: PAnsiChar;
 end;
 TMCI_VD_Escape_ParmsW = record
   dwCallback: DWORD;
   lpstrCommand: PWideChar;
 end;
 TMCI_VD_Escape_Parms = TMCI_VD_Escape_ParmsA;

 PMCI_Wave_Open_ParmsA = ^TMCI_Wave_Open_ParmsA;
 PMCI_Wave_Open_ParmsW = ^TMCI_Wave_Open_ParmsW;
 PMCI_Wave_Open_Parms = PMCI_Wave_Open_ParmsA;
 TMCI_Wave_Open_ParmsA = record
   dwCallback: DWORD;
   wDeviceID: MCIDEVICEID;
   lpstrDeviceType: PAnsiChar;
   lpstrElementName: PAnsiChar;
   lpstrAlias: PAnsiChar;
   dwBufferSeconds: DWORD;
 end;
 TMCI_Wave_Open_ParmsW = record
   dwCallback: DWORD;
   wDeviceID: MCIDEVICEID;
   lpstrDeviceType: PWideChar;
   lpstrElementName: PWideChar;
   lpstrAlias: PWideChar;
   dwBufferSeconds: DWORD;
 end;
 TMCI_Wave_Open_Parms = TMCI_Wave_Open_ParmsA;

 PMCI_Wave_Delete_Parms = ^TMCI_Wave_Delete_Parms;
 TMCI_Wave_Delete_Parms = record
   dwCallback: DWORD;
   dwFrom: DWORD;
   dwTo: DWORD;
 end;

 PMCI_Wave_Set_Parms = ^TMCI_Wave_Set_Parms;
 TMCI_Wave_Set_Parms = record
   dwCallback: DWORD;
   dwTimeFormat: DWORD;
   dwAudio: DWORD;
   wInput: UINT;
   wOutput: UINT;
   wFormatTag: Word;
   wReserved2: Word;
   nChannels: Word;
   wReserved3: Word;
   nSamplesPerSec: DWORD;
   nAvgBytesPerSec: DWORD;
   nBlockAlign: Word;
   wReserved4: Word;
   wBitsPerSample: Word;
   wReserved5: Word;
 end;

 PMCI_Seq_Set_Parms = ^TMCI_Seq_Set_Parms;
 TMCI_Seq_Set_Parms = record
   dwCallback: DWORD;
   dwTimeFormat: DWORD;
   dwAudio: DWORD;
   dwTempo: DWORD;
   dwPort: DWORD;
   dwSlave: DWORD;
   dwMaster: DWORD;
   dwOffset: DWORD;
 end;

 PMCI_Anim_Open_ParmsA = ^TMCI_Anim_Open_ParmsA;
 PMCI_Anim_Open_ParmsW = ^TMCI_Anim_Open_ParmsW;
 PMCI_Anim_Open_Parms = PMCI_Anim_Open_ParmsA;
 TMCI_Anim_Open_ParmsA = record
   dwCallback: DWORD;
   wDeviceID: MCIDEVICEID;
   lpstrDeviceType: PAnsiChar;
   lpstrElementName: PAnsiChar;
   lpstrAlias: PAnsiChar;
   dwStyle: DWORD;
   hWndParent: HWND;
 end;
 TMCI_Anim_Open_ParmsW = record
   dwCallback: DWORD;
   wDeviceID: MCIDEVICEID;
   lpstrDeviceType: PWideChar;
   lpstrElementName: PWideChar;
   lpstrAlias: PWideChar;
   dwStyle: DWORD;
   hWndParent: HWND;
 end;
 TMCI_Anim_Open_Parms = TMCI_Anim_Open_ParmsA;

 PMCI_Anim_Play_Parms = ^TMCI_Anim_Play_Parms;
 TMCI_Anim_Play_Parms = record
   dwCallback: DWORD;
   dwFrom: DWORD;
   dwTo: DWORD;
   dwSpeed: DWORD;
 end;

 PMCI_Anim_Step_Parms = ^TMCI_Anim_Step_Parms;
 TMCI_Anim_Step_Parms = record
   dwCallback: DWORD;
   dwFrames: DWORD;
 end;

 PMCI_Anim_Window_ParmsA = ^TMCI_Anim_Window_ParmsA;
 PMCI_Anim_Window_ParmsW = ^TMCI_Anim_Window_ParmsW;
 PMCI_Anim_Window_Parms = PMCI_Anim_Window_ParmsA;
 TMCI_Anim_Window_ParmsA = record
   dwCallback: DWORD;
   Wnd: HWND;
   nCmdShow: UINT;
   lpstrText: PAnsiChar;
 end;
 TMCI_Anim_Window_ParmsW = record
   dwCallback: DWORD;
   Wnd: HWND;
   nCmdShow: UINT;
   lpstrText: PWideChar;
 end;
 TMCI_Anim_Window_Parms = TMCI_Anim_Window_ParmsA;

 PMCI_Anim_Rect_Parms = ^ TMCI_Anim_Rect_Parms;
 TMCI_Anim_Rect_Parms = record
   dwCallback: DWORD;
   rc: TRect;
 end;

 PMCI_Anim_Update_Parms = ^TMCI_Anim_Update_Parms;
 TMCI_Anim_Update_Parms = record
   dwCallback: DWORD;
   rc: TRect;
   hDC: HDC;
 end;

 PMCI_Ovly_Open_ParmsA = ^TMCI_Ovly_Open_ParmsA;
 PMCI_Ovly_Open_ParmsW = ^TMCI_Ovly_Open_ParmsW;
 PMCI_Ovly_Open_Parms = PMCI_Ovly_Open_ParmsA;
 TMCI_Ovly_Open_ParmsA = record
   dwCallback: DWORD;
   wDeviceID: MCIDEVICEID;
   lpstrDeviceType: PAnsiChar;
   lpstrElementName: PAnsiChar;
   lpstrAlias: PAnsiChar;
   dwStyle: DWORD;
   hWndParent: HWND;
 end;
 TMCI_Ovly_Open_ParmsW = record
   dwCallback: DWORD;
   wDeviceID: MCIDEVICEID;
   lpstrDeviceType: PWideChar;
   lpstrElementName: PWideChar;
   lpstrAlias: PWideChar;
   dwStyle: DWORD;
   hWndParent: HWND;
 end;
 TMCI_Ovly_Open_Parms = TMCI_Ovly_Open_ParmsA;

 PMCI_Ovly_Window_ParmsA = ^TMCI_Ovly_Window_ParmsA;
 PMCI_Ovly_Window_ParmsW = ^TMCI_Ovly_Window_ParmsW;
 PMCI_Ovly_Window_Parms = PMCI_Ovly_Window_ParmsA;
 TMCI_Ovly_Window_ParmsA = record
   dwCallback: DWORD;
   WHandle: HWND;
   nCmdShow: UINT;
   lpstrText: PAnsiChar;
 end;
 TMCI_Ovly_Window_ParmsW = record
   dwCallback: DWORD;
   WHandle: HWND;
   nCmdShow: UINT;
   lpstrText: PWideChar;
 end;
 TMCI_Ovly_Window_Parms = TMCI_Ovly_Window_ParmsA;

 PMCI_Ovly_Rect_Parms = ^ TMCI_Ovly_Rect_Parms;
 TMCI_Ovly_Rect_Parms = record
   dwCallback: DWORD;
   rc: TRect;
 end;

 PMCI_Ovly_Save_ParmsA = ^TMCI_Ovly_Save_ParmsA;
 PMCI_Ovly_Save_ParmsW = ^TMCI_Ovly_Save_ParmsW;
 PMCI_Ovly_Save_Parms = PMCI_Ovly_Save_ParmsA;
 TMCI_Ovly_Save_ParmsA = record
   dwCallback: DWORD;
   lpfilename: PAnsiChar;
   rc: TRect;
 end;
 TMCI_Ovly_Save_ParmsW = record
   dwCallback: DWORD;
   lpfilename: PWideChar;
   rc: TRect;
 end;
 TMCI_Ovly_Save_Parms = TMCI_Ovly_Save_ParmsA;

 PMCI_Ovly_Load_ParmsA = ^TMCI_Ovly_Load_ParmsA;
 PMCI_Ovly_Load_ParmsW = ^TMCI_Ovly_Load_ParmsW;
 PMCI_Ovly_Load_Parms = PMCI_Ovly_Load_ParmsA;
 TMCI_Ovly_Load_ParmsA = record
   dwCallback: DWORD;
   lpfilename: PAnsiChar;
   rc: TRect;
 end;
 TMCI_Ovly_Load_ParmsW = record
   dwCallback: DWORD;
   lpfilename: PWideChar;
   rc: TRect;
 end;
 TMCI_Ovly_Load_Parms = TMCI_Ovly_Load_ParmsA;

/****************************************************************************

                             MMSystem macros

****************************************************************************/

function mci_MSF_Minute(msf: DWord): Byte;

function mci_MSF_Second(msf: DWord): Byte;

function mci_MSF_Frame(msf: DWord): Byte;

function mci_Make_MSF(m, s, f: Byte): DWord;

function mci_TMSF_Track(tmsf: DWord): Byte;

function mci_TMSF_Minute(tmsf: DWord): Byte;

function mci_TMSF_Second(tmsf: DWord): Byte;

function mci_TMSF_Frame(tmsf: DWord): Byte;

function mci_Make_TMSF(t, m, s, f: Byte): DWord;

function mci_HMS_Hour(hms: DWord): Byte;

function mci_HMS_Minute(hms: DWord): Byte;

function mci_HMS_Second(hms: DWord): Byte;

function mci_Make_HMS(h, m, s: Byte): DWord;

/****************************************************************************

                             Function prototypes

****************************************************************************/

function auxGetDevCapsA conv arg_stdcall (uDeviceID: UINT; lpCaps: PAuxCapsA; uSize: UINT): MMRESULT;
 external winmmdll name 'auxGetDevCapsA';

function auxGetDevCapsW conv arg_stdcall (uDeviceID: UINT; lpCaps: PAuxCapsW; uSize: UINT): MMRESULT;
 external winmmdll name 'auxGetDevCapsW';

function auxGetDevCaps conv arg_stdcall (uDeviceID: UINT; lpCaps: PAuxCaps; uSize: UINT): MMRESULT;
 external winmmdll name 'auxGetDevCapsA';

function auxGetNumDevs: UINT;
 external winmmdll name 'auxGetNumDevs';

function auxGetVolume conv arg_stdcall (uDeviceID: UINT; lpdwVolume: PDWORD): MMRESULT;
 external winmmdll name 'auxGetVolume';

function auxOutMessage conv arg_stdcall (uDeviceID, uMessage: UINT; dw1, dw2: DWORD): MMRESULT;
 external winmmdll name 'auxOutMessage';

function auxSetVolume conv arg_stdcall (uDeviceID: UINT; dwVolume: DWORD): MMRESULT;
 external winmmdll name 'auxSetVolume';

function CloseDriver conv arg_stdcall (hDriver: HDRVR; lParam1, lParam2: Longint): Longint;
 external winmmdll name 'CloseDriver';

function DefDriverProc conv arg_stdcall (dwDriverIdentifier: DWORD; hdrvr: HDRVR; uMsg: UINT; lParam1, lParam2: LPARAM): Longint;
 external winmmdll name 'DefDriverProc';

function DrvGetModuleHandle conv arg_stdcall (hDriver: HDRVR): HMODULE;
 external winmmdll name 'DrvGetModuleHandle';

function GetDriverModuleHandle conv arg_stdcall (hDriver: HDRVR): HMODULE;
 external winmmdll name 'GetDriverModuleHandle';

function joyGetDevCapsA conv arg_stdcall (uJoyID: UINT; lpCaps: PJoyCapsA; uSize: UINT): MMRESULT;
 external winmmdll name 'joyGetDevCapsA';

function joyGetDevCapsW conv arg_stdcall (uJoyID: UINT; lpCaps: PJoyCapsW; uSize: UINT): MMRESULT;
 external winmmdll name 'joyGetDevCapsW';

function joyGetDevCaps conv arg_stdcall (uJoyID: UINT; lpCaps: PJoyCaps; uSize: UINT): MMRESULT;
 external winmmdll name 'joyGetDevCapsA';

function joyGetNumDevs: UINT;
 external winmmdll name 'joyGetNumDevs';

function joyGetPos conv arg_stdcall (uJoyID: UINT; lpInfo: PJoyInfo): MMRESULT;
 external winmmdll name 'joyGetPos';

function joyGetPosEx conv arg_stdcall (uJoyID: UINT; lpInfo: PJoyInfoEx): MMRESULT;
 external winmmdll name 'joyGetPosEx';

function joyGetThreshold conv arg_stdcall (uJoyID: UINT; lpuThreshold: PUINT): MMRESULT;
 external winmmdll name 'joyGetThreshold';

function joyReleaseCapture conv arg_stdcall (uJoyID: UINT): MMRESULT;
 external winmmdll name 'joyReleaseCapture';

function joySetCapture conv arg_stdcall (Handle: HWND; uJoyID, uPeriod: UINT; bChanged: BOOL): MMRESULT;
 external winmmdll name 'joySetCapture';

function joySetThreshold conv arg_stdcall (uJoyID, uThreshold: UINT): MMRESULT;
 external winmmdll name 'joySetThreshold';

function mciExecute conv arg_stdcall (pszCommand: LPCSTR): BOOL;
 external winmmdll name 'mciExecute';

function mciGetCreatorTask conv arg_stdcall (mcierr: MCIERROR): HTASK;
 external winmmdll name 'mciGetCreatorTask';

function mciGetDeviceIDA conv arg_stdcall (pszDevice: PAnsiChar): MCIDEVICEID;
 external winmmdll name 'mciGetDeviceIDA';

function mciGetDeviceIDW conv arg_stdcall (pszDevice: PWideChar): MCIDEVICEID;
 external winmmdll name 'mciGetDeviceIDW';

function mciGetDeviceID conv arg_stdcall (pszDevice: PChar): MCIDEVICEID;
 external winmmdll name 'mciGetDeviceIDA';

function mciGetDeviceIDFromElementIDA conv arg_stdcall (dwElementID: DWORD; lpstrType: PAnsiChar): MCIDEVICEID;
 external winmmdll name 'mciGetDeviceIDFromElementIDA';

function mciGetDeviceIDFromElementIDW conv arg_stdcall (dwElementID: DWORD; lpstrType: PWideChar): MCIDEVICEID;
 external winmmdll name 'mciGetDeviceIDFromElementIDW';

function mciGetDeviceIDFromElementID conv arg_stdcall (dwElementID: DWORD; lpstrType: PChar): MCIDEVICEID;
 external winmmdll name 'mciGetDeviceIDFromElementIDA';

function mciGetErrorStringA conv arg_stdcall (mcierr: MCIERROR; pszText: PAnsiChar; uLength: UINT): BOOL;
 external winmmdll name 'mciGetErrorStringA';

function mciGetErrorStringW conv arg_stdcall (mcierr: MCIERROR; pszText: PWideChar; uLength: UINT): BOOL;
 external winmmdll name 'mciGetErrorStringW';

function mciGetErrorString conv arg_stdcall (mcierr: MCIERROR; pszText: PChar; uLength: UINT): BOOL;
 external winmmdll name 'mciGetErrorStringA';

function mciGetYieldProc conv arg_stdcall (mcierr: MCIERROR; lpdwYieldData: PDWORD): TFNYieldProc;
 external winmmdll name 'mciGetYieldProc';

function mciSendCommandA conv arg_stdcall (mciId: MCIDEVICEID; uMessage: UINT; dwParam1, dwParam2: DWORD): MCIERROR;
 external winmmdll name 'mciSendCommandA';

function mciSendCommandW conv arg_stdcall (mciId: MCIDEVICEID; uMessage: UINT; dwParam1, dwParam2: DWORD): MCIERROR;
 external winmmdll name 'mciSendCommandW';

function mciSendCommand conv arg_stdcall (mciId: MCIDEVICEID; uMessage: UINT; dwParam1, dwParam2: DWORD): MCIERROR;
 external winmmdll name 'mciSendCommandA';

function mciSendStringA conv arg_stdcall (lpstrCommand, lpstrReturnString: PAnsiChar; uReturnLength: UINT; hWndCallback: HWND): MCIERROR;
 external winmmdll name 'mciSendStringA';

function mciSendStringW conv arg_stdcall (lpstrCommand, lpstrReturnString: PWideChar; uReturnLength: UINT; hWndCallback: HWND): MCIERROR;
 external winmmdll name 'mciSendStringW';

function mciSendString conv arg_stdcall (lpstrCommand, lpstrReturnString: PChar; uReturnLength: UINT; hWndCallback: HWND): MCIERROR;
 external winmmdll name 'mciSendStringA';

function mciSetYieldProc conv arg_stdcall (mcierr: MCIERROR; fpYieldProc: TFNYieldProc; dwYieldData: DWORD): BOOL;
 external winmmdll name 'mciSetYieldProc';

function midiConnect conv arg_stdcall (hmi: HMIDI; hmo: HMIDIOUT; pReserved: Pointer): MMRESULT;
 external winmmdll name 'midiConnect';

function midiDisconnect conv arg_stdcall (hmi: HMIDI; hmo: HMIDIOUT; pReserved: Pointer): MMRESULT;
 external winmmdll name 'midiDisconnect';

function midiInAddBuffer conv arg_stdcall (hMidiIn: HMIDIIN; lpMidiInHdr: PMidiHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInAddBuffer';

function midiInClose conv arg_stdcall (hMidiIn: HMIDIIN): MMRESULT;
 external winmmdll name 'midiInClose';

function midiInGetDevCapsA conv arg_stdcall (DeviceID: UINT; lpCaps: PMidiInCapsA; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInGetDevCapsA';

function midiInGetDevCapsW conv arg_stdcall (DeviceID: UINT; lpCaps: PMidiInCapsW; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInGetDevCapsW';

function midiInGetDevCaps conv arg_stdcall (DeviceID: UINT; lpCaps: PMidiInCaps; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInGetDevCapsA';

function midiInGetErrorTextA conv arg_stdcall (mmrError: MMRESULT; pszText: PAnsiChar; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInGetErrorTextA';

function midiInGetErrorTextW conv arg_stdcall (mmrError: MMRESULT; pszText: PWideChar; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInGetErrorTextW';

function midiInGetErrorText conv arg_stdcall (mmrError: MMRESULT; pszText: PChar; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInGetErrorTextA';

function midiInGetID conv arg_stdcall (hMidiIn: HMIDIIN; lpuDeviceID: PUINT): MMRESULT;
 external winmmdll name 'midiInGetID';

function midiInGetNumDevs: UINT;
 external winmmdll name 'midiInGetNumDevs';

function midiInMessage conv arg_stdcall (hMidiIn: HMIDIIN; uMessage: UINT; dw1, dw2: DWORD): MMRESULT;
 external winmmdll name 'midiInMessage';

function midiInOpen conv arg_stdcall (lphMidiIn: PHMIDIIN; uDeviceID: UINT; dwCallback, dwInstance, dwFlags: DWORD): MMRESULT;
 external winmmdll name 'midiInOpen';

function midiInPrepareHeader conv arg_stdcall (hMidiIn: HMIDIIN; lpMidiInHdr: PMidiHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInPrepareHeader';

function midiInReset conv arg_stdcall (hMidiIn: HMIDIIN): MMRESULT;
 external winmmdll name 'midiInReset';

function midiInStart conv arg_stdcall (hMidiIn: HMIDIIN): MMRESULT;
 external winmmdll name 'midiInStart';

function midiInStop conv arg_stdcall (hMidiIn: HMIDIIN): MMRESULT;
 external winmmdll name 'midiInStop';

function midiInUnprepareHeader conv arg_stdcall (hMidiIn: HMIDIIN; lpMidiInHdr: PMidiHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'midiInUnprepareHeader';

function midiOutCacheDrumPatches conv arg_stdcall (hMidiOut: HMIDIOUT; uPatch: UINT; lpwKeyArray: PWord; uFlags: UINT): MMRESULT;
 external winmmdll name 'midiOutCacheDrumPatches';

function midiOutCachePatches conv arg_stdcall (hMidiOut: HMIDIOUT; uBank: UINT; lpwPatchArray: PWord; uFlags: UINT): MMRESULT;
 external winmmdll name 'midiOutCachePatches';

function midiOutClose conv arg_stdcall (hMidiOut: HMIDIOUT): MMRESULT;
 external winmmdll name 'midiOutClose';

function midiOutGetDevCapsA conv arg_stdcall (uDeviceID: UINT; lpCaps: PMidiOutCapsA; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutGetDevCapsA';

function midiOutGetDevCapsW conv arg_stdcall (uDeviceID: UINT; lpCaps: PMidiOutCapsW; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutGetDevCapsW';

function midiOutGetDevCaps conv arg_stdcall (uDeviceID: UINT; lpCaps: PMidiOutCaps; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutGetDevCapsA';

function midiOutGetErrorTextA conv arg_stdcall (mmrError: MMRESULT; pszText: PAnsiChar; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutGetErrorTextA';

function midiOutGetErrorTextW conv arg_stdcall (mmrError: MMRESULT; pszText: PWideChar; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutGetErrorTextW';

function midiOutGetErrorText conv arg_stdcall (mmrError: MMRESULT; pszText: PChar; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutGetErrorTextA';

function midiOutGetID conv arg_stdcall (hMidiOut: HMIDIOUT; lpuDeviceID: PUINT): MMRESULT;
 external winmmdll name 'midiOutGetID';

function midiOutGetNumDevs: UINT;
 external winmmdll name 'midiOutGetNumDevs';

function midiOutGetVolume conv arg_stdcall (hmo: HMIDIOUT; lpdwVolume: PDWORD): MMRESULT;
 external winmmdll name 'midiOutGetVolume';

function midiOutLongMsg conv arg_stdcall (hMidiOut: HMIDIOUT; lpMidiOutHdr: PMidiHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutLongMsg';

function midiOutMessage conv arg_stdcall (hMidiOut: HMIDIOUT; uMessage: UINT; dw1, dw2: DWORD): MMRESULT;
 external winmmdll name 'midiOutMessage';

function midiOutOpen conv arg_stdcall (lphMidiOut: PHMIDIOUT; uDeviceID: UINT; dwCallback, dwInstance, dwFlags: DWORD): MMRESULT;
 external winmmdll name 'midiOutOpen';

function midiOutPrepareHeader conv arg_stdcall (hMidiOut: HMIDIOUT; lpMidiOutHdr: PMidiHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutPrepareHeader';

function midiOutReset conv arg_stdcall (hMidiOut: HMIDIOUT): MMRESULT;
 external winmmdll name 'midiOutReset';

function midiOutSetVolume conv arg_stdcall (hmo: HMIDIOUT; dwVolume: DWORD): MMRESULT;
 external winmmdll name 'midiOutSetVolume';

function midiOutShortMsg conv arg_stdcall (hMidiOut: HMIDIOUT; dwMsg: DWORD): MMRESULT;
 external winmmdll name 'midiOutShortMsg';

function midiOutUnprepareHeader conv arg_stdcall (hMidiOut: HMIDIOUT; lpMidiOutHdr: PMidiHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'midiOutUnprepareHeader';

function midiStreamClose conv arg_stdcall (hms: HMIDISTRM): MMRESULT;
 external winmmdll name 'midiStreamClose';

function midiStreamOpen conv arg_stdcall (phms: PHMIDISTRM; puDeviceID: PUINT; cMidi, dwCallback, dwInstance, fdwOpen: DWORD): MMRESULT;
 external winmmdll name 'midiStreamOpen';

function midiStreamOut conv arg_stdcall (hms: HMIDISTRM; pmh: PMidiHdr; cbmh: UINT): MMRESULT;
 external winmmdll name 'midiStreamOut';

function midiStreamPause conv arg_stdcall (hms: HMIDISTRM): MMRESULT;
 external winmmdll name 'midiStreamPause';

function midiStreamPosition conv arg_stdcall (hms: HMIDISTRM; lpmmt: PMMTime; cbmmt: UINT): MMRESULT;
 external winmmdll name 'midiStreamPosition';

function midiStreamProperty conv arg_stdcall (hms: HMIDISTRM; lppropdata: PBYTE; dwProperty: DWORD): MMRESULT;
 external winmmdll name 'midiStreamProperty';

function midiStreamRestart conv arg_stdcall (hms: HMIDISTRM): MMRESULT;
 external winmmdll name 'midiStreamRestart';

function midiStreamStop conv arg_stdcall (hms: HMIDISTRM): MMRESULT;
 external winmmdll name 'midiStreamStop';

function mixerClose conv arg_stdcall (hmx: HMIXER): MMRESULT;
 external winmmdll name 'mixerClose';

function mixerGetControlDetailsA conv arg_stdcall (hmxobj: HMIXEROBJ; pmxcd: PMixerControlDetails; fdwDetails: DWORD): MMRESULT;
 external winmmdll name 'mixerGetControlDetailsA';

function mixerGetControlDetailsW conv arg_stdcall (hmxobj: HMIXEROBJ; pmxcd: PMixerControlDetails; fdwDetails: DWORD): MMRESULT;
 external winmmdll name 'mixerGetControlDetailsW';

function mixerGetControlDetails conv arg_stdcall (hmxobj: HMIXEROBJ; pmxcd: PMixerControlDetails; fdwDetails: DWORD): MMRESULT;
 external winmmdll name 'mixerGetControlDetailsA';

function mixerGetDevCapsA conv arg_stdcall (uMxId: UINT; pmxcaps: PMixerCapsA; cbmxcaps: UINT): MMRESULT;
 external winmmdll name 'mixerGetDevCapsA';

function mixerGetDevCapsW conv arg_stdcall (uMxId: UINT; pmxcaps: PMixerCapsW; cbmxcaps: UINT): MMRESULT;
 external winmmdll name 'mixerGetDevCapsW';

function mixerGetDevCaps conv arg_stdcall (uMxId: UINT; pmxcaps: PMixerCaps; cbmxcaps: UINT): MMRESULT;
 external winmmdll name 'mixerGetDevCapsA';

function mixerGetID conv arg_stdcall (hmxobj: HMIXEROBJ; var puMxId: UINT; fdwId: DWORD): MMRESULT;
 external winmmdll name 'mixerGetID';

function mixerGetLineControlsA conv arg_stdcall (hmxobj: HMIXEROBJ; pmxlc: PMixerLineControlsA; fdwControls: DWORD): MMRESULT;
 external winmmdll name 'mixerGetLineControlsA';

function mixerGetLineControlsW conv arg_stdcall (hmxobj: HMIXEROBJ; pmxlc: PMixerLineControlsW; fdwControls: DWORD): MMRESULT;
 external winmmdll name 'mixerGetLineControlsW';

function mixerGetLineControls conv arg_stdcall (hmxobj: HMIXEROBJ; pmxlc: PMixerLineControls; fdwControls: DWORD): MMRESULT;
 external winmmdll name 'mixerGetLineControlsA';

function mixerGetLineInfoA conv arg_stdcall (hmxobj: HMIXEROBJ; pmxl: PMixerLineA; fdwInfo: DWORD): MMRESULT;
 external winmmdll name 'mixerGetLineInfoA';

function mixerGetLineInfoW conv arg_stdcall (hmxobj: HMIXEROBJ; pmxl: PMixerLineW; fdwInfo: DWORD): MMRESULT;
 external winmmdll name 'mixerGetLineInfoW';

function mixerGetLineInfo conv arg_stdcall (hmxobj: HMIXEROBJ; pmxl: PMixerLine; fdwInfo: DWORD): MMRESULT;
 external winmmdll name 'mixerGetLineInfoA';

function mixerGetNumDevs: UINT;
 external winmmdll name 'mixerGetNumDevs';

function mixerMessage conv arg_stdcall (hmx: HMIXER; uMsg: UINT; dwParam1, dwParam2: DWORD): DWORD;
 external winmmdll name 'mixerMessage';

function mixerOpen conv arg_stdcall (phmx: PHMIXER; uMxId: UINT; dwCallback, dwInstance, fdwOpen: DWORD): MMRESULT;
 external winmmdll name 'mixerOpen';

function mixerSetControlDetails conv arg_stdcall (hmxobj: HMIXEROBJ; pmxcd: PMixerControlDetails; fdwDetails: DWORD): MMRESULT;
 external winmmdll name 'mixerSetControlDetails';

function mmioAdvance conv arg_stdcall (hmmio: HMMIO; lpmmioinfo: PMMIOInfo; uFlags: UINT): MMRESULT;
 external winmmdll name 'mmioAdvance';

function mmioAscend conv arg_stdcall (hmmio: HMMIO; lpck: PMMCKInfo; uFlags: UINT): MMRESULT;
 external winmmdll name 'mmioAscend';

function mmioClose conv arg_stdcall (hmmio: HMMIO; uFlags: UINT): MMRESULT;
 external winmmdll name 'mmioClose';

function mmioCreateChunk conv arg_stdcall (hmmio: HMMIO; lpck: PMMCKInfo; uFlags: UINT): MMRESULT;
 external winmmdll name 'mmioCreateChunk';

function mmioDescend conv arg_stdcall (hmmio: HMMIO; lpck: PMMCKInfo; lpckParent: PMMCKInfo; uFlags: UINT): MMRESULT;
 external winmmdll name 'mmioDescend';

function mmioFlush conv arg_stdcall (hmmio: HMMIO; uFlags: UINT): MMRESULT;
 external winmmdll name 'mmioFlush';

function mmioGetInfo conv arg_stdcall (hmmio: HMMIO; lpmmioinfo: PMMIOInfo; uFlags: UINT): MMRESULT;
 external winmmdll name 'mmioGetInfo';

function mmioInstallIOProcA conv arg_stdcall (fccIOProc: FOURCC; pIOProc: TFNMMIOProc; dwFlags: DWORD): TFNMMIOProc;
 external winmmdll name 'mmioInstallIOProcA';

function mmioInstallIOProcW conv arg_stdcall (fccIOProc: FOURCC; pIOProc: TFNMMIOProc; dwFlags: DWORD): TFNMMIOProc;
 external winmmdll name 'mmioInstallIOProcW';

function mmioInstallIOProc conv arg_stdcall (fccIOProc: FOURCC; pIOProc: TFNMMIOProc; dwFlags: DWORD): TFNMMIOProc;
 external winmmdll name 'mmioInstallIOProcA';

function mmioOpenA conv arg_stdcall (szFileName: PChar; lpmmioinfo: PMMIOInfo; dwOpenFlags: DWORD): HMMIO;
 external winmmdll name 'mmioOpenA';

function mmioOpenW conv arg_stdcall (szFileName: PChar; lpmmioinfo: PMMIOInfo; dwOpenFlags: DWORD): HMMIO;
 external winmmdll name 'mmioOpenW';

function mmioOpen conv arg_stdcall (szFileName: PChar; lpmmioinfo: PMMIOInfo; dwOpenFlags: DWORD): HMMIO;
 external winmmdll name 'mmioOpenA';

function mmioRead conv arg_stdcall (hmmio: HMMIO; pch: PChar; cch: Longint): Longint;
 external winmmdll name 'mmioRead';

function mmioRenameA conv arg_stdcall (szFileName, szNewFileName: PAnsiChar; lpmmioinfo: PMMIOInfo; dwRenameFlags: DWORD): MMRESULT;
 external winmmdll name 'mmioRenameA';

function mmioRenameW conv arg_stdcall (szFileName, szNewFileName: PWideChar; lpmmioinfo: PMMIOInfo; dwRenameFlags: DWORD): MMRESULT;
 external winmmdll name 'mmioRenameW';

function mmioRename conv arg_stdcall (szFileName, szNewFileName: PChar; lpmmioinfo: PMMIOInfo; dwRenameFlags: DWORD): MMRESULT;
 external winmmdll name 'mmioRenameA';

function mmioSeek conv arg_stdcall (hmmio: HMMIO; lOffset: Longint; iOrigin: LongInt): Longint;
 external winmmdll name 'mmioSeek';

function mmioSendMessage conv arg_stdcall (hmmio: HMMIO; uMessage: UINT; lParam1, lParam2: DWORD): Longint;
 external winmmdll name 'mmioSendMessage';

function mmioSetBuffer conv arg_stdcall (hmmio: HMMIO; pchBuffer: PChar; cchBuffer: Longint; uFlags: Word): MMRESULT;
 external winmmdll name 'mmioSetBuffer';

function mmioSetInfo conv arg_stdcall (hmmio: HMMIO; lpmmioinfo: PMMIOInfo; uFlags: UINT): MMRESULT;
 external winmmdll name 'mmioSetInfo';

function mmioStringToFOURCCA conv arg_stdcall (sz: PAnsiChar; uFlags: UINT): FOURCC;
 external winmmdll name 'mmioStringToFOURCCA';

function mmioStringToFOURCCW conv arg_stdcall (sz: PWideChar; uFlags: UINT): FOURCC;
 external winmmdll name 'mmioStringToFOURCCW';

function mmioStringToFOURCC conv arg_stdcall (sz: PChar; uFlags: UINT): FOURCC;
 external winmmdll name 'mmioStringToFOURCCA';

function mmioWrite conv arg_stdcall (hmmio: HMMIO; pch: PChar; cch: Longint): Longint;
 external winmmdll name 'mmioWrite';

function mmsystemGetVersion: UINT;
 external winmmdll name 'mmsystemGetVersion';

function OpenDriver conv arg_stdcall (szDriverName: PWideChar; szSectionName: PWideChar; lParam2: Longint): HDRVR;
 external winmmdll name 'OpenDriver';

function PlaySoundA conv arg_stdcall (pszSound: PAnsiChar; hmod: HMODULE; fdwSound: DWORD): BOOL;
 external winmmdll name 'PlaySoundA';

function PlaySoundW conv arg_stdcall (pszSound: PWideChar; hmod: HMODULE; fdwSound: DWORD): BOOL;
 external winmmdll name 'PlaySoundW';

function PlaySound conv arg_stdcall (pszSound: PChar; hmod: HMODULE; fdwSound: DWORD): BOOL;
 external winmmdll name 'PlaySoundA';

function SendDriverMessage conv arg_stdcall (hDriver: HDRVR; message: UINT; lParam1, lParam2: Longint): Longint;
 external winmmdll name 'SendDriverMessage';

function sndPlaySoundA conv arg_stdcall (lpszSoundName: PAnsiChar; uFlags: UINT): BOOL;
 external winmmdll name 'sndPlaySoundA';

function sndPlaySoundW conv arg_stdcall (lpszSoundName: PWideChar; uFlags: UINT): BOOL;
 external winmmdll name 'sndPlaySoundW';

function sndPlaySound conv arg_stdcall (lpszSoundName: PChar; uFlags: UINT): BOOL;
 external winmmdll name 'sndPlaySoundA';

function timeBeginPeriod conv arg_stdcall (uPeriod: UINT): MMRESULT;
 external winmmdll name 'timeBeginPeriod';

function timeEndPeriod conv arg_stdcall (uPeriod: UINT): MMRESULT;
 external winmmdll name 'timeEndPeriod';

function timeGetDevCaps conv arg_stdcall (lpTimeCaps: PTimeCaps; uSize: UINT): MMRESULT;
 external winmmdll name 'timeGetDevCaps';

function timeGetSystemTime conv arg_stdcall (lpTime: PMMTime; uSize: Word): MMRESULT;
 external winmmdll name 'timeGetSystemTime';

function timeGetTime: DWORD;
 external winmmdll name 'timeGetTime';

function timeKillEvent conv arg_stdcall (uTimerID: UINT): MMRESULT;
 external winmmdll name 'timeKillEvent';

function timeSetEvent conv arg_stdcall (uDelay, uResolution: UINT; lpFunction: TFNTimeCallBack; dwUser: DWORD; uFlags: UINT): MMRESULT;
 external winmmdll name 'timeSetEvent';

function waveInAddBuffer conv arg_stdcall (hWaveIn: HWAVEIN; lpWaveInHdr: PWaveHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInAddBuffer';

function waveInClose conv arg_stdcall (hWaveIn: HWAVEIN): MMRESULT;
 external winmmdll name 'waveInClose';

function waveInGetDevCapsA conv arg_stdcall (hwo: HWAVEOUT; lpCaps: PWaveInCapsA; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInGetDevCapsA';

function waveInGetDevCapsW conv arg_stdcall (hwo: HWAVEOUT; lpCaps: PWaveInCapsW; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInGetDevCapsW';

function waveInGetDevCaps conv arg_stdcall (hwo: HWAVEOUT; lpCaps: PWaveInCaps; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInGetDevCapsA';

function waveInGetErrorTextA conv arg_stdcall (mmrError: MMRESULT; lpText: PAnsiChar; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInGetErrorTextA';

function waveInGetErrorTextW conv arg_stdcall (mmrError: MMRESULT; lpText: PWideChar; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInGetErrorTextW';

function waveInGetErrorText conv arg_stdcall (mmrError: MMRESULT; lpText: PChar; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInGetErrorTextA';

function waveInGetID conv arg_stdcall (hWaveIn: HWAVEIN; lpuDeviceID: PUINT): MMRESULT;
 external winmmdll name 'waveInGetID';

function waveInGetNumDevs: UINT;
 external winmmdll name 'waveInGetNumDevs';

function waveInGetPosition conv arg_stdcall (hWaveIn: HWAVEIN; lpInfo: PMMTime; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInGetPosition';

function waveInMessage conv arg_stdcall (hWaveIn: HWAVEIN; uMessage: UINT; dw1, dw2: DWORD): MMRESULT;
 external winmmdll name 'waveInMessage';

function waveInOpen conv arg_stdcall (lphWaveIn: PHWAVEIN; uDeviceID: UINT; lpFormatEx: PWaveFormatEx; dwCallback, dwInstance, dwFlags: DWORD): MMRESULT;
 external winmmdll name 'waveInOpen';

function waveInPrepareHeader conv arg_stdcall (hWaveIn: HWAVEIN; lpWaveInHdr: PWaveHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInPrepareHeader';

function waveInReset conv arg_stdcall (hWaveIn: HWAVEIN): MMRESULT;
 external winmmdll name 'waveInReset';

function waveInStart conv arg_stdcall (hWaveIn: HWAVEIN): MMRESULT;
 external winmmdll name 'waveInStart';

function waveInStop conv arg_stdcall (hWaveIn: HWAVEIN): MMRESULT;
 external winmmdll name 'waveInStop';

function waveInUnprepareHeader conv arg_stdcall (hWaveIn: HWAVEIN; lpWaveInHdr: PWaveHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'waveInUnprepareHeader';

function waveOutBreakLoop conv arg_stdcall (hWaveOut: HWAVEOUT): MMRESULT;
 external winmmdll name 'waveOutBreakLoop';

function waveOutClose conv arg_stdcall (hWaveOut: HWAVEOUT): MMRESULT;
 external winmmdll name 'waveOutClose';

function waveOutGetDevCapsA conv arg_stdcall (uDeviceID: UINT; lpCaps: PWaveOutCapsA; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutGetDevCapsA';

function waveOutGetDevCapsW conv arg_stdcall (uDeviceID: UINT; lpCaps: PWaveOutCapsW; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutGetDevCapsW';

function waveOutGetDevCaps conv arg_stdcall (uDeviceID: UINT; lpCaps: PWaveOutCaps; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutGetDevCapsA';

function waveOutGetErrorTextA conv arg_stdcall (mmrError: MMRESULT; lpText: PAnsiChar; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutGetErrorTextA';

function waveOutGetErrorTextW conv arg_stdcall (mmrError: MMRESULT; lpText: PWideChar; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutGetErrorTextW';

function waveOutGetErrorText conv arg_stdcall (mmrError: MMRESULT; lpText: PChar; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutGetErrorTextA';

function waveOutGetID conv arg_stdcall (hWaveOut: HWAVEOUT; lpuDeviceID: PUINT): MMRESULT;
 external winmmdll name 'waveOutGetID';

function waveOutGetNumDevs: UINT;
 external winmmdll name 'waveOutGetNumDevs';

function waveOutGetPitch conv arg_stdcall (hWaveOut: HWAVEOUT; lpdwPitch: PDWORD): MMRESULT;
 external winmmdll name 'waveOutGetPitch';

function waveOutGetPlaybackRate conv arg_stdcall (hWaveOut: HWAVEOUT; lpdwRate: PDWORD): MMRESULT;
 external winmmdll name 'waveOutGetPlaybackRate';

function waveOutGetPosition conv arg_stdcall (hWaveOut: HWAVEOUT; lpInfo: PMMTime; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutGetPosition';

function waveOutGetVolume conv arg_stdcall (hwo: HWAVEOUT; lpdwVolume: PDWORD): MMRESULT;
 external winmmdll name 'waveOutGetVolume';

function waveOutMessage conv arg_stdcall (hWaveOut: HWAVEOUT; uMessage: UINT; dw1, dw2: DWORD): Longint;
 external winmmdll name 'waveOutMessage';

function waveOutOpen conv arg_stdcall (lphWaveOut: PHWaveOut; uDeviceID: UINT; lpFormat: PWaveFormatEx; dwCallback, dwInstance, dwFlags: DWORD): MMRESULT;
 external winmmdll name 'waveOutOpen';

function waveOutPause conv arg_stdcall (hWaveOut: HWAVEOUT): MMRESULT;
 external winmmdll name 'waveOutPause';

function waveOutPrepareHeader conv arg_stdcall (hWaveOut: HWAVEOUT; lpWaveOutHdr: PWaveHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutPrepareHeader';

function waveOutReset conv arg_stdcall (hWaveOut: HWAVEOUT): MMRESULT;
 external winmmdll name 'waveOutReset';

function waveOutRestart conv arg_stdcall (hWaveOut: HWAVEOUT): MMRESULT;
 external winmmdll name 'waveOutRestart';

function waveOutSetPitch conv arg_stdcall (hWaveOut: HWAVEOUT; dwPitch: DWORD): MMRESULT;
 external winmmdll name 'waveOutSetPitch';

function waveOutSetPlaybackRate conv arg_stdcall (hWaveOut: HWAVEOUT; dwRate: DWORD): MMRESULT;
 external winmmdll name 'waveOutSetPlaybackRate';

function waveOutSetVolume conv arg_stdcall (hwo: HWAVEOUT; dwVolume: DWORD): MMRESULT;
 external winmmdll name 'waveOutSetVolume';

function waveOutUnprepareHeader conv arg_stdcall (hWaveOut: HWAVEOUT; lpWaveOutHdr: PWaveHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutUnprepareHeader';

function waveOutWrite conv arg_stdcall (hWaveOut: HWAVEOUT; lpWaveOutHdr: PWaveHdr; uSize: UINT): MMRESULT;
 external winmmdll name 'waveOutWrite';

implementation

function mci_MSF_Minute(msf: DWord): Byte; code;
     asm
       mov      eax, [msf]
       ret
end;

function mci_MSF_Second(msf: DWord): Byte; code;
      asm
        mov     eax, [msf]
        shr     eax, 8
        ret
end;

function mci_MSF_Frame(msf: DWord): Byte; code;
      asm
        mov     eax, [msf]
        shr     eax, 16
        ret
end;

function mci_Make_MSF(m, s, f: Byte): DWord; code;
      asm
        movzx   esi, [s]
        shl     esi, 8
        movzx   eax, [f]
        shl     eax, 16
        or      eax, esi
        or      al,  [m]
        ret
end;

function mci_TMSF_Track(tmsf: DWord): Byte; code;
      asm
        mov     eax, [tmsf]
        ret
end;

function mci_TMSF_Minute(tmsf: DWord): Byte; code;
      asm
        mov     eax, [tmsf]
        shr     eax, 8
        ret
end;

function mci_TMSF_Second(tmsf: DWord): Byte; code;
      asm
        mov     eax, [tmsf]
        shr     eax, 16
        ret
end;

function mci_TMSF_Frame(tmsf: DWord): Byte; code;
      asm
        mov     eax, [tmsf]
        shr     eax, 24
        ret
end;

function mci_Make_TMSF(t, m, s, f: Byte): DWord; code;
      asm
        movzx   esi, [f]
        shl     esi, 8
        movzx   eax, [s]
        or      esi, eax
        shl     esi, 16
        movzx   edi, [m]
        shl     edi, 8
        movzx   eax, [t]
        or      eax, edi
        or      eax, esi
        ret
end;

function mci_HMS_Hour(hms: DWord): Byte; code;
      asm
        mov     eax, [hms]
        ret
end;

function mci_HMS_Minute(hms: DWord): Byte; code;
      asm
        mov     eax, [hms]
        shr     eax, 8
        ret
end;

function mci_HMS_Second(hms: DWord): Byte; code;
      asm
       mov      eax, [hms]
       shr      eax, 16
       ret
end;

function mci_Make_HMS(h, m, s: Byte): DWord; code;
      asm
        movzx   esi, [m]
        shl     esi, 8
        movzx   eax, [s]
        shl     eax, 16
        or      eax, esi
        or      al,  [h]
        ret
end;

end.
